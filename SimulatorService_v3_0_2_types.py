##################################################
# file: SimulatorService_v3_0_2_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/local/bin/wsdl2py --complexType --lazy simulator_service_3.0.2.wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://services-common.apollo.pitt.edu/v3_0_2/
##############################

class ns1:
    targetNamespace = "http://services-common.apollo.pitt.edu/v3_0_2/"

    class SoftwareOutputStratificationGranularity_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        type = (schema, "SoftwareOutputStratificationGranularity")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ApolloSoftwareTypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ApolloSoftwareTypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ContentDataTypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ContentDataTypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ContentDataFormatEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ContentDataFormatEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RunMessage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        type = (schema, "RunMessage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.RunMessage_Def.schema
            TClist = [GTD("http://services-common.apollo.pitt.edu/v3_0_2/","Authentication",lazy=True)(pname=(ns,"authentication"), aname="_authentication", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://services-common.apollo.pitt.edu/v3_0_2/","SoftwareIdentification",lazy=True)(pname=(ns,"softwareIdentification"), aname="_softwareIdentification", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._authentication = None
                    self._softwareIdentification = None
                    return
            Holder.__name__ = "RunMessage_Holder"
            self.pyclass = Holder

    class SoftwareLicenseIdentification_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        type = (schema, "SoftwareLicenseIdentification")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.SoftwareLicenseIdentification_Def.schema
            TClist = [ZSI.TC.URI(pname=(ns,"licenseLocation"), aname="_licenseLocation", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"licenseVersion"), aname="_licenseVersion", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"licenseName"), aname="_licenseName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"attributionNotice"), aname="_attributionNotice", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._licenseLocation = None
                    self._licenseVersion = None
                    self._licenseName = None
                    self._attributionNotice = None
                    return
            Holder.__name__ = "SoftwareLicenseIdentification_Holder"
            self.pyclass = Holder

    class SoftwareIdentification_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        type = (schema, "SoftwareIdentification")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.SoftwareIdentification_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"softwareDeveloper"), aname="_softwareDeveloper", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"softwareName"), aname="_softwareName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"softwareVersion"), aname="_softwareVersion", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://services-common.apollo.pitt.edu/v3_0_2/","ApolloSoftwareTypeEnum",lazy=True)(pname=(ns,"softwareType"), aname="_softwareType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://services-common.apollo.pitt.edu/v3_0_2/","SoftwareLicenseIdentification",lazy=True)(pname=(ns,"softwareLicenseIdentification"), aname="_softwareLicenseIdentification", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._softwareDeveloper = None
                    self._softwareName = None
                    self._softwareVersion = None
                    self._softwareType = None
                    self._softwareLicenseIdentification = None
                    return
            Holder.__name__ = "SoftwareIdentification_Holder"
            self.pyclass = Holder

    class RunResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        type = (schema, "RunResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.RunResult_Def.schema
            TClist = [GTD("http://services-common.apollo.pitt.edu/v3_0_2/","RunIdentification",lazy=True)(pname=(ns,"runId"), aname="_runId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://services-common.apollo.pitt.edu/v3_0_2/","MethodCallStatus",lazy=True)(pname=(ns,"methodCallStatus"), aname="_methodCallStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._runId = None
                    self._methodCallStatus = None
                    return
            Holder.__name__ = "RunResult_Holder"
            self.pyclass = Holder

    class InsertRunResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        type = (schema, "InsertRunResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.InsertRunResult_Def.schema
            TClist = [GTD("http://services-common.apollo.pitt.edu/v3_0_2/","RunIdentification",lazy=True)(pname=(ns,"runId"), aname="_runId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"runCached"), aname="_runCached", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._runId = None
                    self._runCached = None
                    return
            Holder.__name__ = "InsertRunResult_Holder"
            self.pyclass = Holder

    class RunStatus_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        type = (schema, "RunStatus")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.RunStatus_Def.schema
            TClist = [GTD("http://services-common.apollo.pitt.edu/v3_0_2/","RunIdentification",lazy=True)(pname=(ns,"runId"), aname="_runId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://services-common.apollo.pitt.edu/v3_0_2/","MethodCallStatusEnum",lazy=True)(pname=(ns,"status"), aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"message"), aname="_message", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._runId = None
                    self._status = None
                    self._message = None
                    return
            Holder.__name__ = "RunStatus_Holder"
            self.pyclass = Holder

    class RunIdentificationAndLabel_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        type = (schema, "RunIdentificationAndLabel")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.RunIdentificationAndLabel_Def.schema
            TClist = [GTD("http://services-common.apollo.pitt.edu/v3_0_2/","RunIdentification",lazy=True)(pname=(ns,"runIdentification"), aname="_runIdentification", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"runLabel"), aname="_runLabel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._runIdentification = None
                    self._runLabel = None
                    return
            Holder.__name__ = "RunIdentificationAndLabel_Holder"
            self.pyclass = Holder

    class TerminateRunRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        type = (schema, "TerminateRunRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.TerminateRunRequest_Def.schema
            TClist = [GTD("http://services-common.apollo.pitt.edu/v3_0_2/","RunIdentification",lazy=True)(pname=(ns,"runIdentification"), aname="_runIdentification", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://services-common.apollo.pitt.edu/v3_0_2/","Authentication",lazy=True)(pname=(ns,"authentication"), aname="_authentication", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._runIdentification = None
                    self._authentication = None
                    return
            Holder.__name__ = "TerminateRunRequest_Holder"
            self.pyclass = Holder

    class ServiceRegistrationRecord_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ServiceRegistrationRecord")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.ServiceRegistrationRecord_Def.schema
            TClist = [GTD("http://services-common.apollo.pitt.edu/v3_0_2/","Authentication",lazy=True)(pname=(ns,"authentication"), aname="_authentication", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ServiceRecord_Def not in ns1.ServiceRegistrationRecord_Def.__bases__:
                bases = list(ns1.ServiceRegistrationRecord_Def.__bases__)
                bases.insert(0, ns1.ServiceRecord_Def)
                ns1.ServiceRegistrationRecord_Def.__bases__ = tuple(bases)

            ns1.ServiceRecord_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class UrlOutputResource_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        type = (schema, "UrlOutputResource")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.UrlOutputResource_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"URL"), aname="_URL", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._URL = None
                    return
            Holder.__name__ = "UrlOutputResource_Holder"
            self.pyclass = Holder

    class ServiceResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ServiceResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ServiceResult_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.URI(pname=(ns,"URL"), aname="_URL", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._URL = None
                    return
            Holder.__name__ = "ServiceResult_Holder"
            self.pyclass = Holder

    class TerminteRunResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        type = (schema, "TerminteRunResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.TerminteRunResult_Def.schema
            TClist = [GTD("http://services-common.apollo.pitt.edu/v3_0_2/","MethodCallStatus",lazy=True)(pname=(ns,"methodCallStatus"), aname="_methodCallStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._methodCallStatus = None
                    return
            Holder.__name__ = "TerminteRunResult_Holder"
            self.pyclass = Holder

    class Role_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        type = (schema, "Role")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.Role_Def.schema
            TClist = [GTD("http://services-common.apollo.pitt.edu/v3_0_2/","SoftwareIdentification",lazy=True)(pname=(ns,"softwareIdentification"), aname="_softwareIdentification", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"can_run"), aname="_can_run", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"can_view_cached_results"), aname="_can_view_cached_results", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._softwareIdentification = None
                    self._can_run = None
                    self._can_view_cached_results = None
                    return
            Holder.__name__ = "Role_Holder"
            self.pyclass = Holder

    class ServiceRecord_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ServiceRecord")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ServiceRecord_Def.schema
            TClist = [ZSI.TC.URI(pname=(ns,"url"), aname="_url", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://services-common.apollo.pitt.edu/v3_0_2/","SoftwareIdentification",lazy=True)(pname=(ns,"softwareIdentification"), aname="_softwareIdentification", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._url = None
                    self._softwareIdentification = None
                    return
            Holder.__name__ = "ServiceRecord_Holder"
            self.pyclass = Holder

    class RunIdentification_Def(ZSI.TCnumbers.IunsignedLong, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        type = (schema, "RunIdentification")
        def __init__(self, pname, **kw):
            ZSI.TCnumbers.IunsignedLong.__init__(self, pname, pyclass=None, **kw)
            class Holder(long):
                typecode = self
            self.pyclass = Holder

    class Authentication_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        type = (schema, "Authentication")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.Authentication_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"requesterId"), aname="_requesterId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"requesterPassword"), aname="_requesterPassword", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._requesterId = None
                    self._requesterPassword = None
                    return
            Holder.__name__ = "Authentication_Holder"
            self.pyclass = Holder

    class MethodCallStatusEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        type = (schema, "MethodCallStatusEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MethodCallStatus_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        type = (schema, "MethodCallStatus")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.MethodCallStatus_Def.schema
            TClist = [GTD("http://services-common.apollo.pitt.edu/v3_0_2/","MethodCallStatusEnum",lazy=True)(pname=(ns,"status"), aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"message"), aname="_message", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._status = None
                    self._message = None
                    return
            Holder.__name__ = "MethodCallStatus_Holder"
            self.pyclass = Holder

    class RunActionEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        type = (schema, "RunActionEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class FileAndURLDescription_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        type = (schema, "FileAndURLDescription")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.FileAndURLDescription_Def.schema
            TClist = [GTD("http://services-common.apollo.pitt.edu/v3_0_2/","SoftwareIdentification",lazy=True)(pname=(ns,"sourceSoftwareIdentification"), aname="_sourceSoftwareIdentification", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://services-common.apollo.pitt.edu/v3_0_2/","SoftwareIdentification",lazy=True)(pname=(ns,"destinationSoftwareIdentification"), aname="_destinationSoftwareIdentification", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://services-common.apollo.pitt.edu/v3_0_2/","ContentDataTypeEnum",lazy=True)(pname=(ns,"contentType"), aname="_contentType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://services-common.apollo.pitt.edu/v3_0_2/","ContentDataFormatEnum",lazy=True)(pname=(ns,"contentFormat"), aname="_contentFormat", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sourceSoftwareIdentification = None
                    self._destinationSoftwareIdentification = None
                    self._name = None
                    self._contentType = None
                    self._contentFormat = None
                    return
            Holder.__name__ = "FileAndURLDescription_Holder"
            self.pyclass = Holder

    class SerializationFormat_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        type = (schema, "SerializationFormat")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ObjectSerializationInformation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ObjectSerializationInformation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ObjectSerializationInformation_Def.schema
            TClist = [GTD("http://services-common.apollo.pitt.edu/v3_0_2/","SerializationFormat",lazy=True)(pname=(ns,"format"), aname="_format", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"className"), aname="_className", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"classNameSpace"), aname="_classNameSpace", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._format = None
                    self._className = None
                    self._classNameSpace = None
                    return
            Holder.__name__ = "ObjectSerializationInformation_Holder"
            self.pyclass = Holder

    class RequestMeta_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        type = (schema, "RequestMeta")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.RequestMeta_Def.schema
            TClist = [GTD("http://services-common.apollo.pitt.edu/v3_0_2/","ObjectSerializationInformation",lazy=True)(pname=(ns,"requestBodySerializationInformation"), aname="_requestBodySerializationInformation", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"isBodySerialized"), aname="_isBodySerialized", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._requestBodySerializationInformation = None
                    self._isBodySerialized = None
                    return
            Holder.__name__ = "RequestMeta_Holder"
            self.pyclass = Holder

    class ResponseMeta_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ResponseMeta")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ResponseMeta_Def.schema
            TClist = [ZSI.TCnumbers.IpositiveInteger(pname=(ns,"status"), aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"statusMessage"), aname="_statusMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"source"), aname="_source", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"numberOfReturnedResults"), aname="_numberOfReturnedResults", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://services-common.apollo.pitt.edu/v3_0_2/","ObjectSerializationInformation",lazy=True)(pname=(ns,"responseBodySerializationInformation"), aname="_responseBodySerializationInformation", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"isBodySerialized"), aname="_isBodySerialized", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._status = None
                    self._statusMessage = None
                    self._source = None
                    self._numberOfReturnedResults = None
                    self._responseBodySerializationInformation = None
                    self._isBodySerialized = None
                    return
            Holder.__name__ = "ResponseMeta_Holder"
            self.pyclass = Holder

    class Response_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        type = (schema, "Response")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.Response_Def.schema
            TClist = [GTD("http://services-common.apollo.pitt.edu/v3_0_2/","ResponseMeta",lazy=True)(pname=(ns,"responseMeta"), aname="_responseMeta", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"responseBody"), aname="_responseBody", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._responseMeta = None
                    self._responseBody = []
                    return
            Holder.__name__ = "Response_Holder"
            self.pyclass = Holder

    class Request_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        type = (schema, "Request")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.Request_Def.schema
            TClist = [GTD("http://services-common.apollo.pitt.edu/v3_0_2/","RequestMeta",lazy=True)(pname=(ns,"requestMeta"), aname="_requestMeta", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"requestBody"), aname="_requestBody", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._requestMeta = None
                    self._requestBody = None
                    return
            Holder.__name__ = "Request_Holder"
            self.pyclass = Holder

    class MethodCallStatusElement_Dec(ElementDeclaration):
        literal = "MethodCallStatusElement"
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://services-common.apollo.pitt.edu/v3_0_2/","MethodCallStatusElement")
            kw["aname"] = "_MethodCallStatusElement"
            if ns1.MethodCallStatus_Def not in ns1.MethodCallStatusElement_Dec.__bases__:
                bases = list(ns1.MethodCallStatusElement_Dec.__bases__)
                bases.insert(0, ns1.MethodCallStatus_Def)
                ns1.MethodCallStatusElement_Dec.__bases__ = tuple(bases)

            ns1.MethodCallStatus_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "MethodCallStatusElement_Dec_Holder"

    class SoftwareLicenseIdentificationElement_Dec(ElementDeclaration):
        literal = "SoftwareLicenseIdentificationElement"
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://services-common.apollo.pitt.edu/v3_0_2/","SoftwareLicenseIdentificationElement")
            kw["aname"] = "_SoftwareLicenseIdentificationElement"
            if ns1.SoftwareLicenseIdentification_Def not in ns1.SoftwareLicenseIdentificationElement_Dec.__bases__:
                bases = list(ns1.SoftwareLicenseIdentificationElement_Dec.__bases__)
                bases.insert(0, ns1.SoftwareLicenseIdentification_Def)
                ns1.SoftwareLicenseIdentificationElement_Dec.__bases__ = tuple(bases)

            ns1.SoftwareLicenseIdentification_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SoftwareLicenseIdentificationElement_Dec_Holder"

    class SoftwareIdentificationElement_Dec(ElementDeclaration):
        literal = "SoftwareIdentificationElement"
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://services-common.apollo.pitt.edu/v3_0_2/","SoftwareIdentificationElement")
            kw["aname"] = "_SoftwareIdentificationElement"
            if ns1.SoftwareIdentification_Def not in ns1.SoftwareIdentificationElement_Dec.__bases__:
                bases = list(ns1.SoftwareIdentificationElement_Dec.__bases__)
                bases.insert(0, ns1.SoftwareIdentification_Def)
                ns1.SoftwareIdentificationElement_Dec.__bases__ = tuple(bases)

            ns1.SoftwareIdentification_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SoftwareIdentificationElement_Dec_Holder"

    class RunResultElement_Dec(ElementDeclaration):
        literal = "RunResultElement"
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://services-common.apollo.pitt.edu/v3_0_2/","RunResultElement")
            kw["aname"] = "_RunResultElement"
            if ns1.RunResult_Def not in ns1.RunResultElement_Dec.__bases__:
                bases = list(ns1.RunResultElement_Dec.__bases__)
                bases.insert(0, ns1.RunResult_Def)
                ns1.RunResultElement_Dec.__bases__ = tuple(bases)

            ns1.RunResult_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "RunResultElement_Dec_Holder"

    class RunStatusElement_Dec(ElementDeclaration):
        literal = "RunStatusElement"
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://services-common.apollo.pitt.edu/v3_0_2/","RunStatusElement")
            kw["aname"] = "_RunStatusElement"
            if ns1.RunStatus_Def not in ns1.RunStatusElement_Dec.__bases__:
                bases = list(ns1.RunStatusElement_Dec.__bases__)
                bases.insert(0, ns1.RunStatus_Def)
                ns1.RunStatusElement_Dec.__bases__ = tuple(bases)

            ns1.RunStatus_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "RunStatusElement_Dec_Holder"

    class RunIdentificationAndLabelElement_Dec(ElementDeclaration):
        literal = "RunIdentificationAndLabelElement"
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://services-common.apollo.pitt.edu/v3_0_2/","RunIdentificationAndLabelElement")
            kw["aname"] = "_RunIdentificationAndLabelElement"
            if ns1.RunIdentificationAndLabel_Def not in ns1.RunIdentificationAndLabelElement_Dec.__bases__:
                bases = list(ns1.RunIdentificationAndLabelElement_Dec.__bases__)
                bases.insert(0, ns1.RunIdentificationAndLabel_Def)
                ns1.RunIdentificationAndLabelElement_Dec.__bases__ = tuple(bases)

            ns1.RunIdentificationAndLabel_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "RunIdentificationAndLabelElement_Dec_Holder"

    class TerminateRunRequestElement_Dec(ElementDeclaration):
        literal = "TerminateRunRequestElement"
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://services-common.apollo.pitt.edu/v3_0_2/","TerminateRunRequestElement")
            kw["aname"] = "_TerminateRunRequestElement"
            if ns1.TerminateRunRequest_Def not in ns1.TerminateRunRequestElement_Dec.__bases__:
                bases = list(ns1.TerminateRunRequestElement_Dec.__bases__)
                bases.insert(0, ns1.TerminateRunRequest_Def)
                ns1.TerminateRunRequestElement_Dec.__bases__ = tuple(bases)

            ns1.TerminateRunRequest_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "TerminateRunRequestElement_Dec_Holder"

    class ServiceRegistrationRecordElement_Dec(ElementDeclaration):
        literal = "ServiceRegistrationRecordElement"
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://services-common.apollo.pitt.edu/v3_0_2/","ServiceRegistrationRecordElement")
            kw["aname"] = "_ServiceRegistrationRecordElement"
            if ns1.ServiceRegistrationRecord_Def not in ns1.ServiceRegistrationRecordElement_Dec.__bases__:
                bases = list(ns1.ServiceRegistrationRecordElement_Dec.__bases__)
                bases.insert(0, ns1.ServiceRegistrationRecord_Def)
                ns1.ServiceRegistrationRecordElement_Dec.__bases__ = tuple(bases)

            ns1.ServiceRegistrationRecord_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ServiceRegistrationRecordElement_Dec_Holder"

    class UrlOutputResourceElement_Dec(ElementDeclaration):
        literal = "UrlOutputResourceElement"
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://services-common.apollo.pitt.edu/v3_0_2/","UrlOutputResourceElement")
            kw["aname"] = "_UrlOutputResourceElement"
            if ns1.UrlOutputResource_Def not in ns1.UrlOutputResourceElement_Dec.__bases__:
                bases = list(ns1.UrlOutputResourceElement_Dec.__bases__)
                bases.insert(0, ns1.UrlOutputResource_Def)
                ns1.UrlOutputResourceElement_Dec.__bases__ = tuple(bases)

            ns1.UrlOutputResource_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "UrlOutputResourceElement_Dec_Holder"

    class ServiceRecordElement_Dec(ElementDeclaration):
        literal = "ServiceRecordElement"
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://services-common.apollo.pitt.edu/v3_0_2/","ServiceRecordElement")
            kw["aname"] = "_ServiceRecordElement"
            if ns1.ServiceRecord_Def not in ns1.ServiceRecordElement_Dec.__bases__:
                bases = list(ns1.ServiceRecordElement_Dec.__bases__)
                bases.insert(0, ns1.ServiceRecord_Def)
                ns1.ServiceRecordElement_Dec.__bases__ = tuple(bases)

            ns1.ServiceRecord_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ServiceRecordElement_Dec_Holder"

    class TerminteRunResultElement_Dec(ElementDeclaration):
        literal = "TerminteRunResultElement"
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://services-common.apollo.pitt.edu/v3_0_2/","TerminteRunResultElement")
            kw["aname"] = "_TerminteRunResultElement"
            if ns1.TerminteRunResult_Def not in ns1.TerminteRunResultElement_Dec.__bases__:
                bases = list(ns1.TerminteRunResultElement_Dec.__bases__)
                bases.insert(0, ns1.TerminteRunResult_Def)
                ns1.TerminteRunResultElement_Dec.__bases__ = tuple(bases)

            ns1.TerminteRunResult_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "TerminteRunResultElement_Dec_Holder"

    class RunIdentificationElement_Dec(ElementDeclaration):
        literal = "RunIdentificationElement"
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://services-common.apollo.pitt.edu/v3_0_2/","RunIdentificationElement")
            kw["aname"] = "_RunIdentificationElement"
            if ns1.RunIdentification_Def not in ns1.RunIdentificationElement_Dec.__bases__:
                bases = list(ns1.RunIdentificationElement_Dec.__bases__)
                bases.insert(0, ns1.RunIdentification_Def)
                ns1.RunIdentificationElement_Dec.__bases__ = tuple(bases)

            ns1.RunIdentification_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "RunIdentificationElement_Dec_Holder"

    class FileAndURLDescriptionElement_Dec(ElementDeclaration):
        literal = "FileAndURLDescriptionElement"
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://services-common.apollo.pitt.edu/v3_0_2/","FileAndURLDescriptionElement")
            kw["aname"] = "_FileAndURLDescriptionElement"
            if ns1.SoftwareIdentification_Def not in ns1.FileAndURLDescriptionElement_Dec.__bases__:
                bases = list(ns1.FileAndURLDescriptionElement_Dec.__bases__)
                bases.insert(0, ns1.SoftwareIdentification_Def)
                ns1.FileAndURLDescriptionElement_Dec.__bases__ = tuple(bases)

            ns1.SoftwareIdentification_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "FileAndURLDescriptionElement_Dec_Holder"

    class ObjectSerializationInformationElement_Dec(ElementDeclaration):
        literal = "ObjectSerializationInformationElement"
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://services-common.apollo.pitt.edu/v3_0_2/","ObjectSerializationInformationElement")
            kw["aname"] = "_ObjectSerializationInformationElement"
            if ns1.ObjectSerializationInformation_Def not in ns1.ObjectSerializationInformationElement_Dec.__bases__:
                bases = list(ns1.ObjectSerializationInformationElement_Dec.__bases__)
                bases.insert(0, ns1.ObjectSerializationInformation_Def)
                ns1.ObjectSerializationInformationElement_Dec.__bases__ = tuple(bases)

            ns1.ObjectSerializationInformation_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ObjectSerializationInformationElement_Dec_Holder"

    class RequestMetaElement_Dec(ElementDeclaration):
        literal = "RequestMetaElement"
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://services-common.apollo.pitt.edu/v3_0_2/","RequestMetaElement")
            kw["aname"] = "_RequestMetaElement"
            if ns1.RequestMeta_Def not in ns1.RequestMetaElement_Dec.__bases__:
                bases = list(ns1.RequestMetaElement_Dec.__bases__)
                bases.insert(0, ns1.RequestMeta_Def)
                ns1.RequestMetaElement_Dec.__bases__ = tuple(bases)

            ns1.RequestMeta_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "RequestMetaElement_Dec_Holder"

    class ResponseMetaElement_Dec(ElementDeclaration):
        literal = "ResponseMetaElement"
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://services-common.apollo.pitt.edu/v3_0_2/","ResponseMetaElement")
            kw["aname"] = "_ResponseMetaElement"
            if ns1.ResponseMeta_Def not in ns1.ResponseMetaElement_Dec.__bases__:
                bases = list(ns1.ResponseMetaElement_Dec.__bases__)
                bases.insert(0, ns1.ResponseMeta_Def)
                ns1.ResponseMetaElement_Dec.__bases__ = tuple(bases)

            ns1.ResponseMeta_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ResponseMetaElement_Dec_Holder"

    class RequestElement_Dec(ElementDeclaration):
        literal = "RequestElement"
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://services-common.apollo.pitt.edu/v3_0_2/","RequestElement")
            kw["aname"] = "_RequestElement"
            if ns1.Request_Def not in ns1.RequestElement_Dec.__bases__:
                bases = list(ns1.RequestElement_Dec.__bases__)
                bases.insert(0, ns1.Request_Def)
                ns1.RequestElement_Dec.__bases__ = tuple(bases)

            ns1.Request_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "RequestElement_Dec_Holder"

    class ResponseElement_Dec(ElementDeclaration):
        literal = "ResponseElement"
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://services-common.apollo.pitt.edu/v3_0_2/","ResponseElement")
            kw["aname"] = "_ResponseElement"
            if ns1.Response_Def not in ns1.ResponseElement_Dec.__bases__:
                bases = list(ns1.ResponseElement_Dec.__bases__)
                bases.insert(0, ns1.Response_Def)
                ns1.ResponseElement_Dec.__bases__ = tuple(bases)

            ns1.Response_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ResponseElement_Dec_Holder"

    class RunMessageElement_Dec(ElementDeclaration):
        literal = "RunMessageElement"
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://services-common.apollo.pitt.edu/v3_0_2/","RunMessageElement")
            kw["aname"] = "_RunMessageElement"
            if ns1.RunMessage_Def not in ns1.RunMessageElement_Dec.__bases__:
                bases = list(ns1.RunMessageElement_Dec.__bases__)
                bases.insert(0, ns1.RunMessage_Def)
                ns1.RunMessageElement_Dec.__bases__ = tuple(bases)

            ns1.RunMessage_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "RunMessageElement_Dec_Holder"

    class InsertRunResultElement_Dec(ElementDeclaration):
        literal = "InsertRunResultElement"
        schema = "http://services-common.apollo.pitt.edu/v3_0_2/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://services-common.apollo.pitt.edu/v3_0_2/","InsertRunResultElement")
            kw["aname"] = "_InsertRunResultElement"
            if ns1.InsertRunResult_Def not in ns1.InsertRunResultElement_Dec.__bases__:
                bases = list(ns1.InsertRunResultElement_Dec.__bases__)
                bases.insert(0, ns1.InsertRunResult_Def)
                ns1.InsertRunResultElement_Dec.__bases__ = tuple(bases)

            ns1.InsertRunResult_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "InsertRunResultElement_Dec_Holder"

# end class ns1 (tns: http://services-common.apollo.pitt.edu/v3_0_2/)

##############################
# targetNamespace
# http://types.apollo.pitt.edu/v3_0_2/
##############################

class ns2:
    targetNamespace = "http://types.apollo.pitt.edu/v3_0_2/"

    class Probability_Def(ZSI.TCnumbers.FPdouble, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "Probability")
        def __init__(self, pname, **kw):
            ZSI.TCnumbers.FPdouble.__init__(self, pname, pyclass=None, **kw)
            class Holder(float):
                typecode = self
            self.pyclass = Holder

    class Fraction_Def(ZSI.TCnumbers.FPdouble, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "Fraction")
        def __init__(self, pname, **kw):
            ZSI.TCnumbers.FPdouble.__init__(self, pname, pyclass=None, **kw)
            class Holder(float):
                typecode = self
            self.pyclass = Holder

    class PositiveDouble_Def(ZSI.TCnumbers.FPdouble, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "PositiveDouble")
        def __init__(self, pname, **kw):
            ZSI.TCnumbers.FPdouble.__init__(self, pname, pyclass=None, **kw)
            class Holder(float):
                typecode = self
            self.pyclass = Holder

    class NonNegativeDouble_Def(ZSI.TCnumbers.FPdouble, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "NonNegativeDouble")
        def __init__(self, pname, **kw):
            ZSI.TCnumbers.FPdouble.__init__(self, pname, pyclass=None, **kw)
            class Holder(float):
                typecode = self
            self.pyclass = Holder

    class SimulatorTypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "SimulatorTypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class UnitOfTimeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "UnitOfTimeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GenderEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "GenderEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SourceOfInfectionEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "SourceOfInfectionEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SimulatorTimeSpecification_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "SimulatorTimeSpecification")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.SimulatorTimeSpecification_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","UnitOfTimeEnum",lazy=True)(pname=(ns,"unitOfTimeForSimulatorTimeStep"), aname="_unitOfTimeForSimulatorTimeStep", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","PositiveDouble",lazy=True)(pname=(ns,"numberOfUnitsOfTimeInOneSimulatorTimeStep"), aname="_numberOfUnitsOfTimeInOneSimulatorTimeStep", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"runLength"), aname="_runLength", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._unitOfTimeForSimulatorTimeStep = None
                    self._numberOfUnitsOfTimeInOneSimulatorTimeStep = None
                    self._runLength = None
                    return
            Holder.__name__ = "SimulatorTimeSpecification_Holder"
            self.pyclass = Holder

    class IndividualTreatmentControlStrategy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "IndividualTreatmentControlStrategy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.IndividualTreatmentControlStrategy_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","ApolloPathogenCode",lazy=True)(pname=(ns,"pathogen"), aname="_pathogen", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","NcbiTaxonId",lazy=True)(pname=(ns,"taxonOfTreatedIndividual"), aname="_taxonOfTreatedIndividual", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Treatment",lazy=True)(pname=(ns,"individualTreatment"), aname="_individualTreatment", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","PopulationTreatmentCensus",lazy=True)(pname=(ns,"populationTreatmentCensus"), aname="_populationTreatmentCensus", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ProbabilisticParameter",lazy=True)(pname=(ns,"compliance"), aname="_compliance", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Duration",lazy=True)(pname=(ns,"delayFromSymptomsToTreatment"), aname="_delayFromSymptomsToTreatment", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ControlStrategyTargetPopulationsAndPrioritization",lazy=True)(pname=(ns,"targetPopulationsAndPrioritizations"), aname="_targetPopulationsAndPrioritizations", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.InfectiousDiseaseControlStrategy_Def not in ns2.IndividualTreatmentControlStrategy_Def.__bases__:
                bases = list(ns2.IndividualTreatmentControlStrategy_Def.__bases__)
                bases.insert(0, ns2.InfectiousDiseaseControlStrategy_Def)
                ns2.IndividualTreatmentControlStrategy_Def.__bases__ = tuple(bases)

            ns2.InfectiousDiseaseControlStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Vaccination_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "Vaccination")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.Vaccination_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","vaccineOntologyId",lazy=True)(pname=(ns,"vaccineId"), aname="_vaccineId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","VaccinationEfficacyForSimulatorConfiguration",lazy=True)(pname=(ns,"vaccinationEfficacies"), aname="_vaccinationEfficacies", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.Treatment_Def not in ns2.Vaccination_Def.__bases__:
                bases = list(ns2.Vaccination_Def.__bases__)
                bases.insert(0, ns2.Treatment_Def)
                ns2.Vaccination_Def.__bases__ = tuple(bases)

            ns2.Treatment_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class IndividualDecolonization_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "IndividualDecolonization")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.IndividualDecolonization_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","IndividualDecolonizationEnum",lazy=True)(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"efficacies"), aname="_efficacies", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.Treatment_Def not in ns2.IndividualDecolonization_Def.__bases__:
                bases = list(ns2.IndividualDecolonization_Def.__bases__)
                bases.insert(0, ns2.Treatment_Def)
                ns2.IndividualDecolonization_Def.__bases__ = tuple(bases)

            ns2.Treatment_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RingIndividualTreatmentControlStrategy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "RingIndividualTreatmentControlStrategy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.RingIndividualTreatmentControlStrategy_Def.schema
            TClist = [ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"ringDiameterInMeters"), aname="_ringDiameterInMeters", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.IndividualTreatmentControlStrategy_Def not in ns2.RingIndividualTreatmentControlStrategy_Def.__bases__:
                bases = list(ns2.RingIndividualTreatmentControlStrategy_Def.__bases__)
                bases.insert(0, ns2.IndividualTreatmentControlStrategy_Def)
                ns2.RingIndividualTreatmentControlStrategy_Def.__bases__ = tuple(bases)

            ns2.IndividualTreatmentControlStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Infection_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "Infection")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.Infection_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","ApolloPathogenCode",lazy=True)(pname=(ns,"pathogen"), aname="_pathogen", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","NcbiTaxonId",lazy=True)(pname=(ns,"host"), aname="_host", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","InfectiousDisease",lazy=True)(pname=(ns,"infectiousDiseases"), aname="_infectiousDiseases", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","InfectionAcquisitionFromInfectedHost",lazy=True)(pname=(ns,"infectionAcquisitionsFromInfectedHosts"), aname="_infectionAcquisitionsFromInfectedHosts", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","InfectionAcquisitionFromContaminatedAbioticThing",lazy=True)(pname=(ns,"infectionAcquisitionsFromContaminatedThings"), aname="_infectionAcquisitionsFromContaminatedThings", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","InfectionAcquisitionFromColonizedHost",lazy=True)(pname=(ns,"InfectionAcquisitionsFromColonizedHosts"), aname="_InfectionAcquisitionsFromColonizedHosts", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.RootApolloLibraryItem_Def not in ns2.Infection_Def.__bases__:
                bases = list(ns2.Infection_Def.__bases__)
                bases.insert(0, ns2.RootApolloLibraryItem_Def)
                ns2.Infection_Def.__bases__ = tuple(bases)

            ns2.RootApolloLibraryItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Contamination_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "Contamination")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.Contamination_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","ApolloPathogenCode",lazy=True)(pname=(ns,"pathogen"), aname="_pathogen", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","AbioticThingEnum",lazy=True)(pname=(ns,"abioticThing"), aname="_abioticThing", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Duration",lazy=True)(pname=(ns,"contaminationDuration"), aname="_contaminationDuration", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ContaminationAcquisition",lazy=True)(pname=(ns,"contaminationAcquisition"), aname="_contaminationAcquisition", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.RootApolloLibraryItem_Def not in ns2.Contamination_Def.__bases__:
                bases = list(ns2.Contamination_Def.__bases__)
                bases.insert(0, ns2.RootApolloLibraryItem_Def)
                ns2.Contamination_Def.__bases__ = tuple(bases)

            ns2.RootApolloLibraryItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Colonization_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "Colonization")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.Colonization_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","ApolloPathogenCode",lazy=True)(pname=(ns,"pathogen"), aname="_pathogen", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","NcbiTaxonId",lazy=True)(pname=(ns,"host"), aname="_host", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Duration",lazy=True)(pname=(ns,"colonizationDuration"), aname="_colonizationDuration", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ConditionalProbabilityDistribution",lazy=True)(pname=(ns,"probabilityOfInfectionOverTime"), aname="_probabilityOfInfectionOverTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ColonizationAcquisition",lazy=True)(pname=(ns,"colonizationAcquisition"), aname="_colonizationAcquisition", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.RootApolloLibraryItem_Def not in ns2.Colonization_Def.__bases__:
                bases = list(ns2.Colonization_Def.__bases__)
                bases.insert(0, ns2.RootApolloLibraryItem_Def)
                ns2.Colonization_Def.__bases__ = tuple(bases)

            ns2.RootApolloLibraryItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ColonizationAcquisition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ColonizationAcquisition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.ColonizationAcquisition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","NcbiTaxonId",lazy=True)(pname=(ns,"infectiousHostSource"), aname="_infectiousHostSource", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","AbioticThingEnum",lazy=True)(pname=(ns,"contaminatedSource"), aname="_contaminatedSource", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","NcbiTaxonId",lazy=True)(pname=(ns,"colonizedHost"), aname="_colonizedHost", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","TransmissionProbability",lazy=True)(pname=(ns,"transmissionProbability"), aname="_transmissionProbability", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Rate",lazy=True)(pname=(ns,"beta"), aname="_beta", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._infectiousHostSource = None
                    self._contaminatedSource = None
                    self._colonizedHost = None
                    self._transmissionProbability = None
                    self._beta = []
                    return
            Holder.__name__ = "ColonizationAcquisition_Holder"
            self.pyclass = Holder

    class PopulationInfectionAndImmunityCensus_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "PopulationInfectionAndImmunityCensus")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.PopulationInfectionAndImmunityCensus_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","ApolloPathogenCode",lazy=True)(pname=(ns,"pathogen"), aname="_pathogen", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","PopulationInfectionAndImmunityCensusData",lazy=True)(pname=(ns,"censusData"), aname="_censusData", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.Census_Def not in ns2.PopulationInfectionAndImmunityCensus_Def.__bases__:
                bases = list(ns2.PopulationInfectionAndImmunityCensus_Def.__bases__)
                bases.insert(0, ns2.Census_Def)
                ns2.PopulationInfectionAndImmunityCensus_Def.__bases__ = tuple(bases)

            ns2.Census_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PopulationInfectionAndImmunityCensusData_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "PopulationInfectionAndImmunityCensusData")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.PopulationInfectionAndImmunityCensusData_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","PopulationInfectionAndImmunityCensusDataCell",lazy=True)(pname=(ns,"censusDataCells"), aname="_censusDataCells", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","PopulationInfectionAndImmunityCensusData",lazy=True)(pname=(ns,"exceptionSubpopulations"), aname="_exceptionSubpopulations", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.CensusData_Def not in ns2.PopulationInfectionAndImmunityCensusData_Def.__bases__:
                bases = list(ns2.PopulationInfectionAndImmunityCensusData_Def.__bases__)
                bases.insert(0, ns2.CensusData_Def)
                ns2.PopulationInfectionAndImmunityCensusData_Def.__bases__ = tuple(bases)

            ns2.CensusData_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PopulationTreatmentCensusData_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "PopulationTreatmentCensusData")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.PopulationTreatmentCensusData_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","PopulationTreatmentCensusDataCell",lazy=True)(pname=(ns,"treatmentCensusDataCells"), aname="_treatmentCensusDataCells", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","PopulationTreatmentCensusData",lazy=True)(pname=(ns,"exceptionSubpopulations"), aname="_exceptionSubpopulations", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.CensusData_Def not in ns2.PopulationTreatmentCensusData_Def.__bases__:
                bases = list(ns2.PopulationTreatmentCensusData_Def.__bases__)
                bases.insert(0, ns2.CensusData_Def)
                ns2.PopulationTreatmentCensusData_Def.__bases__ = tuple(bases)

            ns2.CensusData_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ApolloLocationCode_Def(ZSI.TC.Token, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ApolloLocationCode")
        def __init__(self, pname, **kw):
            ZSI.TC.Token.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RequesterIdentification_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "RequesterIdentification")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.RequesterIdentification_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"requesterName"), aname="_requesterName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"requesterCompany"), aname="_requesterCompany", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"requesterEmail"), aname="_requesterEmail", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._requesterName = None
                    self._requesterCompany = None
                    self._requesterEmail = None
                    return
            Holder.__name__ = "RequesterIdentification_Holder"
            self.pyclass = Holder

    class Vaccine_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "Vaccine")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.Vaccine_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"vaccineIdentifier"), aname="_vaccineIdentifier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"valence"), aname="_valence", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._vaccineIdentifier = None
                    self._valence = []
                    return
            Holder.__name__ = "Vaccine_Holder"
            self.pyclass = Holder

    class AgeGroupEfficacy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "AgeGroupEfficacy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.AgeGroupEfficacy_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","AgeRangeCategoryDefinition",lazy=True)(pname=(ns,"ageRange"), aname="_ageRange", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Fraction",lazy=True)(pname=(ns,"vaccineEfficacy"), aname="_vaccineEfficacy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ageRange = None
                    self._vaccineEfficacy = None
                    return
            Holder.__name__ = "AgeGroupEfficacy_Holder"
            self.pyclass = Holder

    class VaccineContraindications_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "VaccineContraindications")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.VaccineContraindications_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"infants"), aname="_infants", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"preschoolers"), aname="_preschoolers", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"schoolAgeChildren"), aname="_schoolAgeChildren", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"youngAdults"), aname="_youngAdults", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"olderAdults"), aname="_olderAdults", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"elderly"), aname="_elderly", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"pregnantAdultsRestricted"), aname="_pregnantAdultsRestricted", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._infants = None
                    self._preschoolers = None
                    self._schoolAgeChildren = None
                    self._youngAdults = None
                    self._olderAdults = None
                    self._elderly = None
                    self._pregnantAdultsRestricted = None
                    return
            Holder.__name__ = "VaccineContraindications_Holder"
            self.pyclass = Holder

    class AntiviralTreatment_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "AntiviralTreatment")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.AntiviralTreatment_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"antiviralId"), aname="_antiviralId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","AntiviralTreatmentEfficacy",lazy=True)(pname=(ns,"antiviralTreatmentEfficacy"), aname="_antiviralTreatmentEfficacy", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.Treatment_Def not in ns2.AntiviralTreatment_Def.__bases__:
                bases = list(ns2.AntiviralTreatment_Def.__bases__)
                bases.insert(0, ns2.Treatment_Def)
                ns2.AntiviralTreatment_Def.__bases__ = tuple(bases)

            ns2.Treatment_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DrugTreatment_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "DrugTreatment")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.DrugTreatment_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"drugId"), aname="_drugId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","DrugTreatmentEfficacyForSimulatorConfiguration",lazy=True)(pname=(ns,"drugTreatmentEfficacy"), aname="_drugTreatmentEfficacy", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.Treatment_Def not in ns2.DrugTreatment_Def.__bases__:
                bases = list(ns2.DrugTreatment_Def.__bases__)
                bases.insert(0, ns2.Treatment_Def)
                ns2.DrugTreatment_Def.__bases__ = tuple(bases)

            ns2.Treatment_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ArrayDimensionsDefinition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ArrayDimensionsDefinition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.ArrayDimensionsDefinition_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ArrayDimensionsDefinition_Holder"
            self.pyclass = Holder

    class TargetPopulationDefinition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "TargetPopulationDefinition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.TargetPopulationDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","AgeRangeCategoryDefinition",lazy=True)(pname=(ns,"ageRange"), aname="_ageRange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","GenderEnum",lazy=True)(pname=(ns,"gender"), aname="_gender", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","DiseaseOutcomeEnum",lazy=True)(pname=(ns,"diseaseOutcome"), aname="_diseaseOutcome", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","PopulationStratificationEnum",lazy=True)(pname=(ns,"otherStratification"), aname="_otherStratification", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ageRange = None
                    self._gender = None
                    self._diseaseOutcome = None
                    self._otherStratification = None
                    return
            Holder.__name__ = "TargetPopulationDefinition_Holder"
            self.pyclass = Holder

    class PopulationInfectionAndImmunityCensusDataCell_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "PopulationInfectionAndImmunityCensusDataCell")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.PopulationInfectionAndImmunityCensusDataCell_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","AgeRangeCategoryDefinition",lazy=True)(pname=(ns,"ageRange"), aname="_ageRange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","GenderEnum",lazy=True)(pname=(ns,"gender"), aname="_gender", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","InfectionStateEnum",lazy=True)(pname=(ns,"infectionState"), aname="_infectionState", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","DiseaseOutcomeEnum",lazy=True)(pname=(ns,"diseaseState"), aname="_diseaseState", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Fraction",lazy=True)(pname=(ns,"fractionInState"), aname="_fractionInState", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ageRange = None
                    self._gender = None
                    self._infectionState = None
                    self._diseaseState = None
                    self._fractionInState = None
                    return
            Holder.__name__ = "PopulationInfectionAndImmunityCensusDataCell_Holder"
            self.pyclass = Holder

    class PopulationTreatmentCensusDataCell_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "PopulationTreatmentCensusDataCell")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.PopulationTreatmentCensusDataCell_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","AgeRangeCategoryDefinition",lazy=True)(pname=(ns,"ageRange"), aname="_ageRange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","GenderEnum",lazy=True)(pname=(ns,"gender"), aname="_gender", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","TreatmentStateEnum",lazy=True)(pname=(ns,"treatmentState"), aname="_treatmentState", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Fraction",lazy=True)(pname=(ns,"fractionInTreatmentState"), aname="_fractionInTreatmentState", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ageRange = None
                    self._gender = None
                    self._treatmentState = None
                    self._fractionInTreatmentState = None
                    return
            Holder.__name__ = "PopulationTreatmentCensusDataCell_Holder"
            self.pyclass = Holder

    class TemporalArrayDimensionsDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "TemporalArrayDimensionsDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.TemporalArrayDimensionsDefinition_Def.schema
            TClist = [ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"time"), aname="_time", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.ArrayDimensionsDefinition_Def not in ns2.TemporalArrayDimensionsDefinition_Def.__bases__:
                bases = list(ns2.TemporalArrayDimensionsDefinition_Def.__bases__)
                bases.insert(0, ns2.ArrayDimensionsDefinition_Def)
                ns2.TemporalArrayDimensionsDefinition_Def.__bases__ = tuple(bases)

            ns2.ArrayDimensionsDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class InfectionStateEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "InfectionStateEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class TreatmentStateEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "TreatmentStateEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class IndividualTreatmentEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "IndividualTreatmentEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AgeRangeCategoryDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "AgeRangeCategoryDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.AgeRangeCategoryDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","UnitOfTimeEnum",lazy=True)(pname=(ns,"unitOfTimeForLowerBound"), aname="_unitOfTimeForLowerBound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"lowerBound"), aname="_lowerBound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","UnitOfTimeEnum",lazy=True)(pname=(ns,"unitOfTimeForUpperBound"), aname="_unitOfTimeForUpperBound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"upperBound"), aname="_upperBound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.CategoryDefinition_Def not in ns2.AgeRangeCategoryDefinition_Def.__bases__:
                bases = list(ns2.AgeRangeCategoryDefinition_Def.__bases__)
                bases.insert(0, ns2.CategoryDefinition_Def)
                ns2.AgeRangeCategoryDefinition_Def.__bases__ = tuple(bases)

            ns2.CategoryDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DiseaseOutcomeCategoryDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "DiseaseOutcomeCategoryDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.DiseaseOutcomeCategoryDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","DiseaseOutcomeEnum",lazy=True)(pname=(ns,"diseaseOutcome"), aname="_diseaseOutcome", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.CategoryDefinition_Def not in ns2.DiseaseOutcomeCategoryDefinition_Def.__bases__:
                bases = list(ns2.DiseaseOutcomeCategoryDefinition_Def.__bases__)
                bases.insert(0, ns2.CategoryDefinition_Def)
                ns2.DiseaseOutcomeCategoryDefinition_Def.__bases__ = tuple(bases)

            ns2.CategoryDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TimeSpanCategoryDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "TimeSpanCategoryDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.TimeSpanCategoryDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","UnitOfTimeEnum",lazy=True)(pname=(ns,"unitOfTime"), aname="_unitOfTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","TimeScaleEnum",lazy=True)(pname=(ns,"timeZeroReference"), aname="_timeZeroReference", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"startOfTimeSpan"), aname="_startOfTimeSpan", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"durationInTimeUnits"), aname="_durationInTimeUnits", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.CategoryDefinition_Def not in ns2.TimeSpanCategoryDefinition_Def.__bases__:
                bases = list(ns2.TimeSpanCategoryDefinition_Def.__bases__)
                bases.insert(0, ns2.CategoryDefinition_Def)
                ns2.TimeSpanCategoryDefinition_Def.__bases__ = tuple(bases)

            ns2.CategoryDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RealTimeSpanCategoryDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "RealTimeSpanCategoryDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.RealTimeSpanCategoryDefinition_Def.schema
            TClist = [ZSI.TCnumbers.Iinteger(pname=(ns,"offsetFromUtcInHours"), aname="_offsetFromUtcInHours", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"beginningTime"), aname="_beginningTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"endingTime"), aname="_endingTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.CategoryDefinition_Def not in ns2.RealTimeSpanCategoryDefinition_Def.__bases__:
                bases = list(ns2.RealTimeSpanCategoryDefinition_Def.__bases__)
                bases.insert(0, ns2.CategoryDefinition_Def)
                ns2.RealTimeSpanCategoryDefinition_Def.__bases__ = tuple(bases)

            ns2.CategoryDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RealDateSpanCategoryDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "RealDateSpanCategoryDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.RealDateSpanCategoryDefinition_Def.schema
            TClist = [ZSI.TCnumbers.Iinteger(pname=(ns,"offsetFromUtcInHours"), aname="_offsetFromUtcInHours", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"firstDay"), aname="_firstDay", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"lastDay"), aname="_lastDay", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.CategoryDefinition_Def not in ns2.RealDateSpanCategoryDefinition_Def.__bases__:
                bases = list(ns2.RealDateSpanCategoryDefinition_Def.__bases__)
                bases.insert(0, ns2.CategoryDefinition_Def)
                ns2.RealDateSpanCategoryDefinition_Def.__bases__ = tuple(bases)

            ns2.CategoryDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RealTimePointCategoryDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "RealTimePointCategoryDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.RealTimePointCategoryDefinition_Def.schema
            TClist = [ZSI.TCnumbers.Iinteger(pname=(ns,"offsetFromUtcInHours"), aname="_offsetFromUtcInHours", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"date"), aname="_date", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.CategoryDefinition_Def not in ns2.RealTimePointCategoryDefinition_Def.__bases__:
                bases = list(ns2.RealTimePointCategoryDefinition_Def.__bases__)
                bases.insert(0, ns2.CategoryDefinition_Def)
                ns2.RealTimePointCategoryDefinition_Def.__bases__ = tuple(bases)

            ns2.CategoryDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TimeScaleEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "TimeScaleEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PlaceCategoryDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "PlaceCategoryDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.PlaceCategoryDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","PlaceEnum",lazy=True)(pname=(ns,"place"), aname="_place", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.CategoryDefinition_Def not in ns2.PlaceCategoryDefinition_Def.__bases__:
                bases = list(ns2.PlaceCategoryDefinition_Def.__bases__)
                bases.insert(0, ns2.CategoryDefinition_Def)
                ns2.PlaceCategoryDefinition_Def.__bases__ = tuple(bases)

            ns2.CategoryDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class HealthcareFacilityCategoryDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "HealthcareFacilityCategoryDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.HealthcareFacilityCategoryDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","RheaHealthcareFacilityEnum",lazy=True)(pname=(ns,"healthcareFacilityId"), aname="_healthcareFacilityId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.CategoryDefinition_Def not in ns2.HealthcareFacilityCategoryDefinition_Def.__bases__:
                bases = list(ns2.HealthcareFacilityCategoryDefinition_Def.__bases__)
                bases.insert(0, ns2.CategoryDefinition_Def)
                ns2.HealthcareFacilityCategoryDefinition_Def.__bases__ = tuple(bases)

            ns2.CategoryDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class IndividualMovement_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "IndividualMovement")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.IndividualMovement_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IndividualMovement_Holder"
            self.pyclass = Holder

    class HealthcareFacilities_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "HealthcareFacilities")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.HealthcareFacilities_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","HealthcareFacility",lazy=True)(pname=(ns,"healthcareFacilities"), aname="_healthcareFacilities", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._healthcareFacilities = []
                    return
            Holder.__name__ = "HealthcareFacilities_Holder"
            self.pyclass = Holder

    class Facility_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "Facility")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.Facility_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","FacilityId",lazy=True)(pname=(ns,"facilityId"), aname="_facilityId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","FacilityTypeEnum",lazy=True)(pname=(ns,"facilityType"), aname="_facilityType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._facilityId = None
                    self._facilityType = None
                    return
            Holder.__name__ = "Facility_Holder"
            self.pyclass = Holder

    class HealthcareFacility_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "HealthcareFacility")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.HealthcareFacility_Def.schema
            TClist = [ZSI.TCnumbers.IpositiveInteger(pname=(ns,"numberOfBeds"), aname="_numberOfBeds", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Fraction",lazy=True)(pname=(ns,"fractionOfPatientsDischargedToHome"), aname="_fractionOfPatientsDischargedToHome", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","DischargePathAndProbability",lazy=True)(pname=(ns,"dischargePaths"), aname="_dischargePaths", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","DischargeDestinationAndProbability",lazy=True)(pname=(ns,"dischargeDestinations"), aname="_dischargeDestinations", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Unit",lazy=True)(pname=(ns,"units"), aname="_units", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.Facility_Def not in ns2.HealthcareFacility_Def.__bases__:
                bases = list(ns2.HealthcareFacility_Def.__bases__)
                bases.insert(0, ns2.Facility_Def)
                ns2.HealthcareFacility_Def.__bases__ = tuple(bases)

            ns2.Facility_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SchoolFacility_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "SchoolFacility")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.SchoolFacility_Def.schema
            TClist = [ZSI.TCnumbers.IpositiveInteger(pname=(ns,"numberOfStudents"), aname="_numberOfStudents", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Unit",lazy=True)(pname=(ns,"units"), aname="_units", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.Facility_Def not in ns2.SchoolFacility_Def.__bases__:
                bases = list(ns2.SchoolFacility_Def.__bases__)
                bases.insert(0, ns2.Facility_Def)
                ns2.SchoolFacility_Def.__bases__ = tuple(bases)

            ns2.Facility_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ChickenProductionFacility_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ChickenProductionFacility")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.ChickenProductionFacility_Def.schema
            TClist = [ZSI.TCnumbers.IpositiveInteger(pname=(ns,"capacity"), aname="_capacity", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Unit",lazy=True)(pname=(ns,"units"), aname="_units", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.Facility_Def not in ns2.ChickenProductionFacility_Def.__bases__:
                bases = list(ns2.ChickenProductionFacility_Def.__bases__)
                bases.insert(0, ns2.Facility_Def)
                ns2.ChickenProductionFacility_Def.__bases__ = tuple(bases)

            ns2.Facility_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DischargeDestinationAndProbability_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "DischargeDestinationAndProbability")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.DischargeDestinationAndProbability_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"dischargeDestination"), aname="_dischargeDestination", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Probability",lazy=True)(pname=(ns,"probability"), aname="_probability", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._dischargeDestination = None
                    self._probability = []
                    return
            Holder.__name__ = "DischargeDestinationAndProbability_Holder"
            self.pyclass = Holder

    class ReceivingDestinationAndProbability_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ReceivingDestinationAndProbability")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.ReceivingDestinationAndProbability_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","PlaceEnum",lazy=True)(pname=(ns,"receivingDestination"), aname="_receivingDestination", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Probability",lazy=True)(pname=(ns,"probability"), aname="_probability", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Duration",lazy=True)(pname=(ns,"transitTime"), aname="_transitTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.Behavior_Def not in ns2.ReceivingDestinationAndProbability_Def.__bases__:
                bases = list(ns2.ReceivingDestinationAndProbability_Def.__bases__)
                bases.insert(0, ns2.Behavior_Def)
                ns2.ReceivingDestinationAndProbability_Def.__bases__ = tuple(bases)

            ns2.Behavior_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RheaHealthcareFacilityEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "RheaHealthcareFacilityEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GenderCategoryDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "GenderCategoryDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.GenderCategoryDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","GenderEnum",lazy=True)(pname=(ns,"gender"), aname="_gender", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.CategoryDefinition_Def not in ns2.GenderCategoryDefinition_Def.__bases__:
                bases = list(ns2.GenderCategoryDefinition_Def.__bases__)
                bases.insert(0, ns2.CategoryDefinition_Def)
                ns2.GenderCategoryDefinition_Def.__bases__ = tuple(bases)

            ns2.CategoryDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SourceOfInfectionCategoryDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "SourceOfInfectionCategoryDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.SourceOfInfectionCategoryDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","SourceOfInfectionEnum",lazy=True)(pname=(ns,"sourceOfInfection"), aname="_sourceOfInfection", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.CategoryDefinition_Def not in ns2.SourceOfInfectionCategoryDefinition_Def.__bases__:
                bases = list(ns2.SourceOfInfectionCategoryDefinition_Def.__bases__)
                bases.insert(0, ns2.CategoryDefinition_Def)
                ns2.SourceOfInfectionCategoryDefinition_Def.__bases__ = tuple(bases)

            ns2.CategoryDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SimulatorTimeRange_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "SimulatorTimeRange")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.SimulatorTimeRange_Def.schema
            TClist = [ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"lowerBound"), aname="_lowerBound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"upperBound"), aname="_upperBound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._lowerBound = None
                    self._upperBound = None
                    return
            Holder.__name__ = "SimulatorTimeRange_Holder"
            self.pyclass = Holder

    class TargetPriorityPopulation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "TargetPriorityPopulation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.TargetPriorityPopulation_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","TargetPopulationDefinition",lazy=True)(pname=(ns,"targetPopulationDefinition"), aname="_targetPopulationDefinition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","TargetPopulationEnum",lazy=True)(pname=(ns,"targetPopulationEnum"), aname="_targetPopulationEnum", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Fraction",lazy=True)(pname=(ns,"fractionOfTargetPopulationToPrioritize"), aname="_fractionOfTargetPopulationToPrioritize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"priority"), aname="_priority", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._targetPopulationDefinition = None
                    self._targetPopulationEnum = None
                    self._fractionOfTargetPopulationToPrioritize = None
                    self._priority = None
                    return
            Holder.__name__ = "TargetPriorityPopulation_Holder"
            self.pyclass = Holder

    class ControlStrategyTargetPopulationsAndPrioritization_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ControlStrategyTargetPopulationsAndPrioritization")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.ControlStrategyTargetPopulationsAndPrioritization_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","NamedPrioritizationSchemeEnum",lazy=True)(pname=(ns,"controlStrategyNamedPrioritizationScheme"), aname="_controlStrategyNamedPrioritizationScheme", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","TargetPriorityPopulation",lazy=True)(pname=(ns,"controlStrategyTargetPopulationsAndPrioritization"), aname="_controlStrategyTargetPopulationsAndPrioritization", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._controlStrategyNamedPrioritizationScheme = None
                    self._controlStrategyTargetPopulationsAndPrioritization = []
                    return
            Holder.__name__ = "ControlStrategyTargetPopulationsAndPrioritization_Holder"
            self.pyclass = Holder

    class NamedPrioritizationSchemeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "NamedPrioritizationSchemeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class InfectiousDiseaseControlStrategy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "InfectiousDiseaseControlStrategy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.InfectiousDiseaseControlStrategy_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Location",lazy=True)(pname=(ns,"location"), aname="_location", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","TriggerDefinition",lazy=True)(pname=(ns,"controlStrategyStartTime"), aname="_controlStrategyStartTime", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","TriggerDefinition",lazy=True)(pname=(ns,"controlStrategyStopTime"), aname="_controlStrategyStopTime", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Duration",lazy=True)(pname=(ns,"controlStrategyResponseDelay"), aname="_controlStrategyResponseDelay", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Duration",lazy=True)(pname=(ns,"controlStrategyStandDownDelay"), aname="_controlStrategyStandDownDelay", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","LogisticalSystem",lazy=True)(pname=(ns,"logisticalSystems"), aname="_logisticalSystems", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"referenceId"), aname="_referenceId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.RootApolloLibraryItem_Def not in ns2.InfectiousDiseaseControlStrategy_Def.__bases__:
                bases = list(ns2.InfectiousDiseaseControlStrategy_Def.__bases__)
                bases.insert(0, ns2.RootApolloLibraryItem_Def)
                ns2.InfectiousDiseaseControlStrategy_Def.__bases__ = tuple(bases)

            ns2.RootApolloLibraryItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DiseaseSurveillanceTriggerDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "DiseaseSurveillanceTriggerDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.DiseaseSurveillanceTriggerDefinition_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"reactiveControlStrategyTest"), aname="_reactiveControlStrategyTest", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"reactiveControlStrategyThreshold"), aname="_reactiveControlStrategyThreshold", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","UnitOfMeasureEnum",lazy=True)(pname=(ns,"unitOfMeasureForThreshold"), aname="_unitOfMeasureForThreshold", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","OperatorEnum",lazy=True)(pname=(ns,"reactiveControlStrategyOperator"), aname="_reactiveControlStrategyOperator", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","DiseaseSurveillanceCapability",lazy=True)(pname=(ns,"diseaseSurveillanceCapability"), aname="_diseaseSurveillanceCapability", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.TriggerDefinition_Def not in ns2.DiseaseSurveillanceTriggerDefinition_Def.__bases__:
                bases = list(ns2.DiseaseSurveillanceTriggerDefinition_Def.__bases__)
                bases.insert(0, ns2.TriggerDefinition_Def)
                ns2.DiseaseSurveillanceTriggerDefinition_Def.__bases__ = tuple(bases)

            ns2.TriggerDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TemporalTriggerDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "TemporalTriggerDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.TemporalTriggerDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","TimeScaleEnum",lazy=True)(pname=(ns,"timeScale"), aname="_timeScale", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","FixedDuration",lazy=True)(pname=(ns,"timeSinceTimeScaleZero"), aname="_timeSinceTimeScaleZero", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.TriggerDefinition_Def not in ns2.TemporalTriggerDefinition_Def.__bases__:
                bases = list(ns2.TemporalTriggerDefinition_Def.__bases__)
                bases.insert(0, ns2.TriggerDefinition_Def)
                ns2.TemporalTriggerDefinition_Def.__bases__ = tuple(bases)

            ns2.TriggerDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TreatmentSurveillanceTriggerDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "TreatmentSurveillanceTriggerDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.TreatmentSurveillanceTriggerDefinition_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"reactiveControlStrategyTest"), aname="_reactiveControlStrategyTest", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"reactiveControlStrategyThreshold"), aname="_reactiveControlStrategyThreshold", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","OperatorEnum",lazy=True)(pname=(ns,"reactiveControlStrategyOperator"), aname="_reactiveControlStrategyOperator", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","UnitOfMeasureEnum",lazy=True)(pname=(ns,"unitOfMeasureForThreshold"), aname="_unitOfMeasureForThreshold", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","TreatmentSurveillanceCapability",lazy=True)(pname=(ns,"treatmentSurveillanceCapability"), aname="_treatmentSurveillanceCapability", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.TriggerDefinition_Def not in ns2.TreatmentSurveillanceTriggerDefinition_Def.__bases__:
                bases = list(ns2.TreatmentSurveillanceTriggerDefinition_Def.__bases__)
                bases.insert(0, ns2.TriggerDefinition_Def)
                ns2.TreatmentSurveillanceTriggerDefinition_Def.__bases__ = tuple(bases)

            ns2.TriggerDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TriggerDefinition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "TriggerDefinition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.TriggerDefinition_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "TriggerDefinition_Holder"
            self.pyclass = Holder

    class TargetPopulationEnum_Def(ZSI.TC.Token, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "TargetPopulationEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.Token.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PopulationStratificationEnum_Def(ZSI.TC.Token, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "PopulationStratificationEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.Token.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DiscreteNonparametricProbabilityDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "DiscreteNonparametricProbabilityDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.DiscreteNonparametricProbabilityDistribution_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","ProbabilityValuePair",lazy=True)(pname=(ns,"probabilityValuePairs"), aname="_probabilityValuePairs", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.NonparametricProbabilityDistribution_Def not in ns2.DiscreteNonparametricProbabilityDistribution_Def.__bases__:
                bases = list(ns2.DiscreteNonparametricProbabilityDistribution_Def.__bases__)
                bases.insert(0, ns2.NonparametricProbabilityDistribution_Def)
                ns2.DiscreteNonparametricProbabilityDistribution_Def.__bases__ = tuple(bases)

            ns2.NonparametricProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TreatmentContraindication_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "TreatmentContraindication")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.TreatmentContraindication_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","TargetPopulationDefinition",lazy=True)(pname=(ns,"simulatorReferencablePopulation"), aname="_simulatorReferencablePopulation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Fraction",lazy=True)(pname=(ns,"fractionOfSimulatorReferencablePopulation"), aname="_fractionOfSimulatorReferencablePopulation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._simulatorReferencablePopulation = None
                    self._fractionOfSimulatorReferencablePopulation = None
                    return
            Holder.__name__ = "TreatmentContraindication_Holder"
            self.pyclass = Holder

    class ConditionalProbabilityTable_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ConditionalProbabilityTable")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.ConditionalProbabilityTable_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","ArrayDimensionsDefinition",lazy=True)(pname=(ns,"axisDefinitions"), aname="_axisDefinitions", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Probability",lazy=True)(pname=(ns,"pointProbabilities"), aname="_pointProbabilities", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Probability",lazy=True)(pname=(ns,"parametricDistribution"), aname="_parametricDistribution", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._axisDefinitions = None
                    self._pointProbabilities = []
                    self._parametricDistribution = []
                    return
            Holder.__name__ = "ConditionalProbabilityTable_Holder"
            self.pyclass = Holder

    class Duration_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "Duration")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.Duration_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","UnitOfTimeEnum",lazy=True)(pname=(ns,"unitOfTime"), aname="_unitOfTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"referenceId"), aname="_referenceId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.ParameterValue_Def not in ns2.Duration_Def.__bases__:
                bases = list(ns2.Duration_Def.__bases__)
                bases.insert(0, ns2.ParameterValue_Def)
                ns2.Duration_Def.__bases__ = tuple(bases)

            ns2.ParameterValue_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class FixedDuration_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "FixedDuration")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.FixedDuration_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","NonNegativeDouble",lazy=True)(pname=(ns,"value"), aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.Duration_Def not in ns2.FixedDuration_Def.__bases__:
                bases = list(ns2.FixedDuration_Def.__bases__)
                bases.insert(0, ns2.Duration_Def)
                ns2.FixedDuration_Def.__bases__ = tuple(bases)

            ns2.Duration_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class UncertainDuration_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "UncertainDuration")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.UncertainDuration_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","ProbabilityDistribution",lazy=True)(pname=(ns,"probabilityDistribution"), aname="_probabilityDistribution", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.Duration_Def not in ns2.UncertainDuration_Def.__bases__:
                bases = list(ns2.UncertainDuration_Def.__bases__)
                bases.insert(0, ns2.Duration_Def)
                ns2.UncertainDuration_Def.__bases__ = tuple(bases)

            ns2.Duration_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ProbabilisticParameter_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ProbabilisticParameter")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.ProbabilisticParameter_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","Probability",lazy=True)(pname=(ns,"probability"), aname="_probability", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ProbabilityDistribution",lazy=True)(pname=(ns,"probabilityDistribution"), aname="_probabilityDistribution", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.ParameterValue_Def not in ns2.ProbabilisticParameter_Def.__bases__:
                bases = list(ns2.ProbabilisticParameter_Def.__bases__)
                bases.insert(0, ns2.ParameterValue_Def)
                ns2.ProbabilisticParameter_Def.__bases__ = tuple(bases)

            ns2.ParameterValue_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Treatment_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "Treatment")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.Treatment_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","NcbiTaxonId",lazy=True)(pname=(ns,"speciesOfTreatedOrganism"), aname="_speciesOfTreatedOrganism", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ApolloPathogenCode",lazy=True)(pname=(ns,"pathogen"), aname="_pathogen", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"numDosesInTreatmentCourse"), aname="_numDosesInTreatmentCourse", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Duration",lazy=True)(pname=(ns,"durationOfTreatmentCourse"), aname="_durationOfTreatmentCourse", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","TreatmentContraindication",lazy=True)(pname=(ns,"treatmentContraindications"), aname="_treatmentContraindications", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.RootApolloLibraryItem_Def not in ns2.Treatment_Def.__bases__:
                bases = list(ns2.Treatment_Def.__bases__)
                bases.insert(0, ns2.RootApolloLibraryItem_Def)
                ns2.Treatment_Def.__bases__ = tuple(bases)

            ns2.RootApolloLibraryItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BayesianNetwork_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "BayesianNetwork")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.BayesianNetwork_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","BayesianNetworkStructureType",lazy=True)(pname=(ns,"networkStructure"), aname="_networkStructure", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ConditionalProbabilityTable",lazy=True)(pname=(ns,"CPTs"), aname="_CPTs", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","PrototypicalProbabilityFunction",lazy=True)(pname=(ns,"PPFs"), aname="_PPFs", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","GeNIE_XMLType",lazy=True)(pname=(ns,"GeNIE_XML"), aname="_GeNIE_XML", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.ProbabilityDistribution_Def not in ns2.BayesianNetwork_Def.__bases__:
                bases = list(ns2.BayesianNetwork_Def.__bases__)
                bases.insert(0, ns2.ProbabilityDistribution_Def)
                ns2.BayesianNetwork_Def.__bases__ = tuple(bases)

            ns2.ProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TimeDefinition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "TimeDefinition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.TimeDefinition_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"simulatorTime"), aname="_simulatorTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"dateTime"), aname="_dateTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._simulatorTime = None
                    self._dateTime = None
                    return
            Holder.__name__ = "TimeDefinition_Holder"
            self.pyclass = Holder

    class TreatmentPreventableOutcomeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "TreatmentPreventableOutcomeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class TreatmentEfficacy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "TreatmentEfficacy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.TreatmentEfficacy_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","NcbiTaxonId",lazy=True)(pname=(ns,"hostIdentifier"), aname="_hostIdentifier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ApolloPathogenCode",lazy=True)(pname=(ns,"strainIdentifier"), aname="_strainIdentifier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","TreatmentPreventableOutcomeEnum",lazy=True)(pname=(ns,"forTreatmentPreventableOutcome"), aname="_forTreatmentPreventableOutcome", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._hostIdentifier = None
                    self._strainIdentifier = None
                    self._forTreatmentPreventableOutcome = None
                    return
            Holder.__name__ = "TreatmentEfficacy_Holder"
            self.pyclass = Holder

    class VaccinationEfficacyForSimulatorConfiguration_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "VaccinationEfficacyForSimulatorConfiguration")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.VaccinationEfficacyForSimulatorConfiguration_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","Probability",lazy=True)(pname=(ns,"averageVaccinationEfficacy"), aname="_averageVaccinationEfficacy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ConditionalProbabilityDistribution",lazy=True)(pname=(ns,"vaccinationEfficacyConditionedOnAgeRange"), aname="_vaccinationEfficacyConditionedOnAgeRange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","VaccinationEfficacyConditionedOnTimeSinceDose",lazy=True)(pname=(ns,"vaccinationEfficaciesConditionedOnTimeSinceMostRecentDose"), aname="_vaccinationEfficaciesConditionedOnTimeSinceMostRecentDose", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.TreatmentEfficacy_Def not in ns2.VaccinationEfficacyForSimulatorConfiguration_Def.__bases__:
                bases = list(ns2.VaccinationEfficacyForSimulatorConfiguration_Def.__bases__)
                bases.insert(0, ns2.TreatmentEfficacy_Def)
                ns2.VaccinationEfficacyForSimulatorConfiguration_Def.__bases__ = tuple(bases)

            ns2.TreatmentEfficacy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class VaccinationEfficacyConditionedOnTimeSinceDose_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "VaccinationEfficacyConditionedOnTimeSinceDose")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.VaccinationEfficacyConditionedOnTimeSinceDose_Def.schema
            TClist = [ZSI.TCnumbers.IpositiveInteger(pname=(ns,"numberOfDosesAdministered"), aname="_numberOfDosesAdministered", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","TimeAxisCategoryLabels",lazy=True)(pname=(ns,"timeIntervalLabelDefinitions"), aname="_timeIntervalLabelDefinitions", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Probability",lazy=True)(pname=(ns,"vaccinationEfficacyConditionedOnTimeSinceMostRecentDose"), aname="_vaccinationEfficacyConditionedOnTimeSinceMostRecentDose", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._numberOfDosesAdministered = None
                    self._timeIntervalLabelDefinitions = []
                    self._vaccinationEfficacyConditionedOnTimeSinceMostRecentDose = []
                    return
            Holder.__name__ = "VaccinationEfficacyConditionedOnTimeSinceDose_Holder"
            self.pyclass = Holder

    class VaccinationEfficacyInferred_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "VaccinationEfficacyInferred")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.VaccinationEfficacyInferred_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","VaccinationEfficacyStudy",lazy=True)(pname=(ns,"inferredFromTheseStudies"), aname="_inferredFromTheseStudies", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","BayesianNetwork",lazy=True)(pname=(ns,"vaccinationEfficacyModel"), aname="_vaccinationEfficacyModel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.TreatmentEfficacy_Def not in ns2.VaccinationEfficacyInferred_Def.__bases__:
                bases = list(ns2.VaccinationEfficacyInferred_Def.__bases__)
                bases.insert(0, ns2.TreatmentEfficacy_Def)
                ns2.VaccinationEfficacyInferred_Def.__bases__ = tuple(bases)

            ns2.TreatmentEfficacy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class VaccinationEfficacyMeasured_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "VaccinationEfficacyMeasured")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.VaccinationEfficacyMeasured_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","ConditionalProbabilityTable",lazy=True)(pname=(ns,"measuredEfficacyValue"), aname="_measuredEfficacyValue", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.TreatmentEfficacy_Def not in ns2.VaccinationEfficacyMeasured_Def.__bases__:
                bases = list(ns2.VaccinationEfficacyMeasured_Def.__bases__)
                bases.insert(0, ns2.TreatmentEfficacy_Def)
                ns2.VaccinationEfficacyMeasured_Def.__bases__ = tuple(bases)

            ns2.TreatmentEfficacy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class VaccinationEfficacyStudy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "VaccinationEfficacyStudy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.VaccinationEfficacyStudy_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","TreatmentPreventableOutcomeEnum",lazy=True)(pname=(ns,"vaccinationPreventableOutcome"), aname="_vaccinationPreventableOutcome", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","VaccinationEfficacyMeasured",lazy=True)(pname=(ns,"vaccinationEfficacyMeasured"), aname="_vaccinationEfficacyMeasured", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"dataSets"), aname="_dataSets", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"references"), aname="_references", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._vaccinationPreventableOutcome = None
                    self._vaccinationEfficacyMeasured = []
                    self._dataSets = []
                    self._references = []
                    return
            Holder.__name__ = "VaccinationEfficacyStudy_Holder"
            self.pyclass = Holder

    class AntiviralTreatmentEfficacy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "AntiviralTreatmentEfficacy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.AntiviralTreatmentEfficacy_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","Probability",lazy=True)(pname=(ns,"efficacy"), aname="_efficacy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.TreatmentEfficacy_Def not in ns2.AntiviralTreatmentEfficacy_Def.__bases__:
                bases = list(ns2.AntiviralTreatmentEfficacy_Def.__bases__)
                bases.insert(0, ns2.TreatmentEfficacy_Def)
                ns2.AntiviralTreatmentEfficacy_Def.__bases__ = tuple(bases)

            ns2.TreatmentEfficacy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DrugTreatmentEfficacyForSimulatorConfiguration_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "DrugTreatmentEfficacyForSimulatorConfiguration")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.DrugTreatmentEfficacyForSimulatorConfiguration_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","Probability",lazy=True)(pname=(ns,"averageDrugEfficacy"), aname="_averageDrugEfficacy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ConditionalProbabilityDistribution",lazy=True)(pname=(ns,"drugEfficacyConditionedOnAgeRange"), aname="_drugEfficacyConditionedOnAgeRange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ConditionalProbabilityDistribution",lazy=True)(pname=(ns,"drugEfficaciesConditionedOnCurrentDiseaseOutcome"), aname="_drugEfficaciesConditionedOnCurrentDiseaseOutcome", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.TreatmentEfficacy_Def not in ns2.DrugTreatmentEfficacyForSimulatorConfiguration_Def.__bases__:
                bases = list(ns2.DrugTreatmentEfficacyForSimulatorConfiguration_Def.__bases__)
                bases.insert(0, ns2.TreatmentEfficacy_Def)
                ns2.DrugTreatmentEfficacyForSimulatorConfiguration_Def.__bases__ = tuple(bases)

            ns2.TreatmentEfficacy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Ecosystem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "Ecosystem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.Ecosystem_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "Ecosystem_Holder"
            self.pyclass = Holder

    class SyntheticEcosystem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "SyntheticEcosystem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.SyntheticEcosystem_Def.schema
            TClist = [ZSI.TCtimes.gDateTime(pname=(ns,"date"), aname="_date", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Location",lazy=True)(pname=(ns,"location"), aname="_location", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"populations"), aname="_populations", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","SchoolFacility",lazy=True)(pname=(ns,"schools"), aname="_schools", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Facility",lazy=True)(pname=(ns,"workplaces"), aname="_workplaces", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","HealthcareFacilities",lazy=True)(pname=(ns,"healthcareFacilities"), aname="_healthcareFacilities", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._date = None
                    self._location = None
                    self._populations = []
                    self._schools = []
                    self._workplaces = []
                    self._healthcareFacilities = []
                    return
            Holder.__name__ = "SyntheticEcosystem_Holder"
            self.pyclass = Holder

    class Households_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "Households")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.Households_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "Households_Holder"
            self.pyclass = Holder

    class HouseholdsData_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "HouseholdsData")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.HouseholdsData_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"households"), aname="_households", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.Households_Def not in ns2.HouseholdsData_Def.__bases__:
                bases = list(ns2.HouseholdsData_Def.__bases__)
                bases.insert(0, ns2.Households_Def)
                ns2.HouseholdsData_Def.__bases__ = tuple(bases)

            ns2.Households_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Household_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "Household")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.Household_Def.schema
            TClist = [ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"householdId"), aname="_householdId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ApolloLocationCode",lazy=True)(pname=(ns,"groupQuarters"), aname="_groupQuarters", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ApolloLocationCode",lazy=True)(pname=(ns,"unRelated"), aname="_unRelated", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"individualIds"), aname="_individualIds", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._householdId = None
                    self._groupQuarters = None
                    self._unRelated = None
                    self._individualIds = []
                    return
            Holder.__name__ = "Household_Holder"
            self.pyclass = Holder

    class HouseholdsPointerToData_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "HouseholdsPointerToData")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.HouseholdsPointerToData_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"url"), aname="_url", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.Households_Def not in ns2.HouseholdsPointerToData_Def.__bases__:
                bases = list(ns2.HouseholdsPointerToData_Def.__bases__)
                bases.insert(0, ns2.Households_Def)
                ns2.HouseholdsPointerToData_Def.__bases__ = tuple(bases)

            ns2.Households_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PointerToData_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "PointerToData")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.PointerToData_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","DataTypeEnum",lazy=True)(pname=(ns,"dataType"), aname="_dataType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.URI(pname=(ns,"xmlFormat"), aname="_xmlFormat", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.URI(pname=(ns,"csvFormat"), aname="_csvFormat", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._dataType = None
                    self._xmlFormat = None
                    self._csvFormat = None
                    return
            Holder.__name__ = "PointerToData_Holder"
            self.pyclass = Holder

    class BioticEcosystem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "BioticEcosystem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.BioticEcosystem_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "BioticEcosystem_Holder"
            self.pyclass = Holder

    class BioticEcosystemData_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "BioticEcosystemData")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.BioticEcosystemData_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","Census",lazy=True)(pname=(ns,"populations"), aname="_populations", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"households"), aname="_households", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.BioticEcosystem_Def not in ns2.BioticEcosystemData_Def.__bases__:
                bases = list(ns2.BioticEcosystemData_Def.__bases__)
                bases.insert(0, ns2.BioticEcosystem_Def)
                ns2.BioticEcosystemData_Def.__bases__ = tuple(bases)

            ns2.BioticEcosystem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AbioticEcosystem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "AbioticEcosystem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.AbioticEcosystem_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "AbioticEcosystem_Holder"
            self.pyclass = Holder

    class AbioticEcosystemData_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "AbioticEcosystemData")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.AbioticEcosystemData_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","SchoolFacility",lazy=True)(pname=(ns,"schools"), aname="_schools", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"workplaces"), aname="_workplaces", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"houses"), aname="_houses", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","HealthcareFacility",lazy=True)(pname=(ns,"healthcareFacilities"), aname="_healthcareFacilities", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.AbioticEcosystem_Def not in ns2.AbioticEcosystemData_Def.__bases__:
                bases = list(ns2.AbioticEcosystemData_Def.__bases__)
                bases.insert(0, ns2.AbioticEcosystem_Def)
                ns2.AbioticEcosystemData_Def.__bases__ = tuple(bases)

            ns2.AbioticEcosystem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BayesianNetworkStructureType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "BayesianNetworkStructureType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.BayesianNetworkStructureType_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "BayesianNetworkStructureType_Holder"
            self.pyclass = Holder

    class PrototypicalProbabilityFunction_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "PrototypicalProbabilityFunction")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.PrototypicalProbabilityFunction_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "PrototypicalProbabilityFunction_Holder"
            self.pyclass = Holder

    class GeNIE_XMLType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "GeNIE_XMLType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.GeNIE_XMLType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"theXML"), aname="_theXML", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._theXML = None
                    return
            Holder.__name__ = "GeNIE_XMLType_Holder"
            self.pyclass = Holder

    class TimeAxisCategoryLabels_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "TimeAxisCategoryLabels")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.TimeAxisCategoryLabels_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"label"), aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"simulatorTimeEarliest"), aname="_simulatorTimeEarliest", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"simulatorTimeLatest"), aname="_simulatorTimeLatest", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._label = None
                    self._simulatorTimeEarliest = None
                    self._simulatorTimeLatest = None
                    return
            Holder.__name__ = "TimeAxisCategoryLabels_Holder"
            self.pyclass = Holder

    class LocationDefinition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "LocationDefinition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.LocationDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","ApolloLocationCode",lazy=True)(pname=(ns,"locationsIncluded"), aname="_locationsIncluded", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ApolloLocationCode",lazy=True)(pname=(ns,"locationsExcluded"), aname="_locationsExcluded", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","MultiGeometry",lazy=True)(pname=(ns,"multiGeometries"), aname="_multiGeometries", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._locationsIncluded = []
                    self._locationsExcluded = []
                    self._multiGeometries = []
                    return
            Holder.__name__ = "LocationDefinition_Holder"
            self.pyclass = Holder

    class LibraryItem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "LibraryItem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.LibraryItem_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"base_type"), aname="_base_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._base_type = None
                    return
            Holder.__name__ = "LibraryItem_Holder"
            self.pyclass = Holder

    class DecisionAlternative_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "DecisionAlternative")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.DecisionAlternative_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"singleStrategy"), aname="_singleStrategy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"combinationStrategy"), aname="_combinationStrategy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SequentialCombinationStrategy"), aname="_SequentialCombinationStrategy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._singleStrategy = None
                    self._combinationStrategy = None
                    self._SequentialCombinationStrategy = None
                    return
            Holder.__name__ = "DecisionAlternative_Holder"
            self.pyclass = Holder

    class UtilityFunction_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "UtilityFunction")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.UtilityFunction_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"lambdaFunction"), aname="_lambdaFunction", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"textDescription"), aname="_textDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._lambdaFunction = None
                    self._textDescription = None
                    return
            Holder.__name__ = "UtilityFunction_Holder"
            self.pyclass = Holder

    class SensitivityAnalysis_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "SensitivityAnalysis")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.SensitivityAnalysis_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "SensitivityAnalysis_Holder"
            self.pyclass = Holder

    class SensitivityAnalysisResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "SensitivityAnalysisResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.SensitivityAnalysisResult_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "SensitivityAnalysisResult_Holder"
            self.pyclass = Holder

    class InfectiousDiseaseDecisionModel_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "InfectiousDiseaseDecisionModel")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.InfectiousDiseaseDecisionModel_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","InfectiousDiseaseControlStrategy",lazy=True)(pname=(ns,"controlStrategies"), aname="_controlStrategies", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","InfectiousDiseaseScenario",lazy=True)(pname=(ns,"simulatorConfiguration "), aname="_simulatorConfiguration_", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","UtilityFunction",lazy=True)(pname=(ns,"utilityFunction"), aname="_utilityFunction", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.RootApolloLibraryItem_Def not in ns2.InfectiousDiseaseDecisionModel_Def.__bases__:
                bases = list(ns2.InfectiousDiseaseDecisionModel_Def.__bases__)
                bases.insert(0, ns2.RootApolloLibraryItem_Def)
                ns2.InfectiousDiseaseDecisionModel_Def.__bases__ = tuple(bases)

            ns2.RootApolloLibraryItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DecisionAnalysis_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "DecisionAnalysis")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.DecisionAnalysis_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","InfectiousDiseaseDecisionModel",lazy=True)(pname=(ns,"decisionModel"), aname="_decisionModel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","BaseCaseResult",lazy=True)(pname=(ns,"baseCaseResult "), aname="_baseCaseResult_", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","SensitivityAnalysis",lazy=True)(pname=(ns,"sensitivityAnalyses"), aname="_sensitivityAnalyses", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.RootApolloLibraryItem_Def not in ns2.DecisionAnalysis_Def.__bases__:
                bases = list(ns2.DecisionAnalysis_Def.__bases__)
                bases.insert(0, ns2.RootApolloLibraryItem_Def)
                ns2.DecisionAnalysis_Def.__bases__ = tuple(bases)

            ns2.RootApolloLibraryItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ExpectedUtility_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ExpectedUtility")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.ExpectedUtility_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ExpectedUtility_Holder"
            self.pyclass = Holder

    class BaseCaseResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "BaseCaseResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.BaseCaseResult_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","DecisionAlternative",lazy=True)(pname=(ns,"decisionAlternatives"), aname="_decisionAlternatives", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"expectedUtilities"), aname="_expectedUtilities", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._decisionAlternatives = []
                    self._expectedUtilities = []
                    return
            Holder.__name__ = "BaseCaseResult_Holder"
            self.pyclass = Holder

    class RootApolloLibraryItem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "RootApolloLibraryItem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.RootApolloLibraryItem_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "RootApolloLibraryItem_Holder"
            self.pyclass = Holder

    class PathogenTaxonID_Def(ZSI.TCnumbers.IpositiveInteger, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "PathogenTaxonID")
        def __init__(self, pname, **kw):
            ZSI.TCnumbers.IpositiveInteger.__init__(self, pname, pyclass=None, **kw)
            class Holder(int):
                typecode = self
            self.pyclass = Holder

    class DiseaseOutcomeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "DiseaseOutcomeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PlaceEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "PlaceEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class InfectionAcquisitionFromContaminatedAbioticThing_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "InfectionAcquisitionFromContaminatedAbioticThing")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.InfectionAcquisitionFromContaminatedAbioticThing_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","AbioticThingEnum",lazy=True)(pname=(ns,"contaminatedAbioticThing"), aname="_contaminatedAbioticThing", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ProbabilisticParameter",lazy=True)(pname=(ns,"transmissionProbability"), aname="_transmissionProbability", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._contaminatedAbioticThing = None
                    self._transmissionProbability = None
                    return
            Holder.__name__ = "InfectionAcquisitionFromContaminatedAbioticThing_Holder"
            self.pyclass = Holder

    class InfectionAcquisitionFromColonizedHost_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "InfectionAcquisitionFromColonizedHost")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.InfectionAcquisitionFromColonizedHost_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","NcbiTaxonId",lazy=True)(pname=(ns,"colonizedHost"), aname="_colonizedHost", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ProbabilisticParameter",lazy=True)(pname=(ns,"transmissionProbability"), aname="_transmissionProbability", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"beta"), aname="_beta", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._colonizedHost = None
                    self._transmissionProbability = None
                    self._beta = None
                    return
            Holder.__name__ = "InfectionAcquisitionFromColonizedHost_Holder"
            self.pyclass = Holder

    class InfectionAcquisitionFromInfectedHost_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "InfectionAcquisitionFromInfectedHost")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.InfectionAcquisitionFromInfectedHost_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","NcbiTaxonId",lazy=True)(pname=(ns,"infectedHost"), aname="_infectedHost", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Duration",lazy=True)(pname=(ns,"latentPeriodDuration"), aname="_latentPeriodDuration", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Duration",lazy=True)(pname=(ns,"infectiousPeriodDuration"), aname="_infectiousPeriodDuration", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ReproductionNumber",lazy=True)(pname=(ns,"basicReproductionNumbers"), aname="_basicReproductionNumbers", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Rate",lazy=True)(pname=(ns,"beta"), aname="_beta", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","TransmissionProbability",lazy=True)(pname=(ns,"transmissionProbabilities"), aname="_transmissionProbabilities", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Rate",lazy=True)(pname=(ns,"innoculationRate"), aname="_innoculationRate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._infectedHost = None
                    self._latentPeriodDuration = None
                    self._infectiousPeriodDuration = None
                    self._basicReproductionNumbers = []
                    self._beta = None
                    self._transmissionProbabilities = []
                    self._innoculationRate = None
                    return
            Holder.__name__ = "InfectionAcquisitionFromInfectedHost_Holder"
            self.pyclass = Holder

    class GesParametersForContactAndTransmission_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "GesParametersForContactAndTransmission")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.GesParametersForContactAndTransmission_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","SeasonalityFunctionParameters",lazy=True)(pname=(ns,"seasonalityFunctionParameters"), aname="_seasonalityFunctionParameters", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","GesInfectiousnessParameterSet",lazy=True)(pname=(ns,"infectiousnessParameterSet"), aname="_infectiousnessParameterSet", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ContactModelForSetting",lazy=True)(pname=(ns,"contactModelsForSettings"), aname="_contactModelsForSettings", minOccurs=6, maxOccurs=6, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._seasonalityFunctionParameters = None
                    self._infectiousnessParameterSet = None
                    self._contactModelsForSettings = []
                    return
            Holder.__name__ = "GesParametersForContactAndTransmission_Holder"
            self.pyclass = Holder

    class GesInfectiousnessParameterSet_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "GesInfectiousnessParameterSet")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.GesInfectiousnessParameterSet_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","ContinuousParametricProbabilityDistribution",lazy=True)(pname=(ns,"infectiousnessProfile"), aname="_infectiousnessProfile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ProbabilisticParameter",lazy=True)(pname=(ns,"treat_inf"), aname="_treat_inf", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ProbabilisticParameter",lazy=True)(pname=(ns,"prophylaxis_inf"), aname="_prophylaxis_inf", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ProbabilisticParameter",lazy=True)(pname=(ns,"vacc_inf"), aname="_vacc_inf", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","NonNegativeDouble",lazy=True)(pname=(ns,"relative_inf_symptomatic_multiplier"), aname="_relative_inf_symptomatic_multiplier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._infectiousnessProfile = None
                    self._treat_inf = None
                    self._prophylaxis_inf = None
                    self._vacc_inf = None
                    self._relative_inf_symptomatic_multiplier = None
                    return
            Holder.__name__ = "GesInfectiousnessParameterSet_Holder"
            self.pyclass = Holder

    class ContactModelForSetting_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ContactModelForSetting")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.ContactModelForSetting_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","SpatialKernelFunctionParameters",lazy=True)(pname=(ns,"spatialKernelParametersForSetting"), aname="_spatialKernelParametersForSetting", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Probability",lazy=True)(pname=(ns,"probSymptomaticInfectionClinicallyDetected"), aname="_probSymptomaticInfectionClinicallyDetected", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","PositiveDouble",lazy=True)(pname=(ns,"symptomaticInfectionMultiplier"), aname="_symptomaticInfectionMultiplier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Probability",lazy=True)(pname=(ns,"probSevereInfectionClinicallyDetected"), aname="_probSevereInfectionClinicallyDetected", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._spatialKernelParametersForSetting = None
                    self._probSymptomaticInfectionClinicallyDetected = None
                    self._symptomaticInfectionMultiplier = None
                    self._probSevereInfectionClinicallyDetected = None
                    return
            Holder.__name__ = "ContactModelForSetting_Holder"
            self.pyclass = Holder

    class ContactModelForCommunity_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ContactModelForCommunity")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.ContactModelForCommunity_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","Rate",lazy=True)(pname=(ns,"r_community"), aname="_r_community", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","PositiveDouble",lazy=True)(pname=(ns,"c_community"), aname="_c_community", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","PositiveDouble",lazy=True)(pname=(ns,"q_community"), aname="_q_community", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.ContactModelForSetting_Def not in ns2.ContactModelForCommunity_Def.__bases__:
                bases = list(ns2.ContactModelForCommunity_Def.__bases__)
                bases.insert(0, ns2.ContactModelForSetting_Def)
                ns2.ContactModelForCommunity_Def.__bases__ = tuple(bases)

            ns2.ContactModelForSetting_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ContactModelForHousehold_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ContactModelForHousehold")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.ContactModelForHousehold_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","Rate",lazy=True)(pname=(ns,"r_household"), aname="_r_household", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","PositiveDouble",lazy=True)(pname=(ns,"c_household"), aname="_c_household", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","PositiveDouble",lazy=True)(pname=(ns,"q_household"), aname="_q_household", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.ContactModelForSetting_Def not in ns2.ContactModelForHousehold_Def.__bases__:
                bases = list(ns2.ContactModelForHousehold_Def.__bases__)
                bases.insert(0, ns2.ContactModelForSetting_Def)
                ns2.ContactModelForHousehold_Def.__bases__ = tuple(bases)

            ns2.ContactModelForSetting_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ContactModelForPlace_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ContactModelForPlace")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.ContactModelForPlace_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","AbioticThingEnum",lazy=True)(pname=(ns,"placeType"), aname="_placeType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Rate",lazy=True)(pname=(ns,"r_place"), aname="_r_place", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","WithinGroupTransmissionProbability",lazy=True)(pname=(ns,"P_Pn_group"), aname="_P_Pn_group", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Probability",lazy=True)(pname=(ns,"probSymptomaticIndividualAbsent"), aname="_probSymptomaticIndividualAbsent", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","PositiveDouble",lazy=True)(pname=(ns,"symptomaticAbsenteeMultiplier"), aname="_symptomaticAbsenteeMultiplier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Probability",lazy=True)(pname=(ns,"probSeverelyInfectedIndividualAbsent"), aname="_probSeverelyInfectedIndividualAbsent", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","PositiveDouble",lazy=True)(pname=(ns,"severelyInfectedAbsenteeMultiplier"), aname="_severelyInfectedAbsenteeMultiplier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","PositiveDouble",lazy=True)(pname=(ns,"q_social"), aname="_q_social", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.ContactModelForSetting_Def not in ns2.ContactModelForPlace_Def.__bases__:
                bases = list(ns2.ContactModelForPlace_Def.__bases__)
                bases.insert(0, ns2.ContactModelForSetting_Def)
                ns2.ContactModelForPlace_Def.__bases__ = tuple(bases)

            ns2.ContactModelForSetting_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class InfectiousDiseaseScenario_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "InfectiousDiseaseScenario")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.InfectiousDiseaseScenario_Def.schema
            TClist = [ZSI.TCtimes.gDateTime(pname=(ns,"scenarioDate"), aname="_scenarioDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Location",lazy=True)(pname=(ns,"scenarioLocation"), aname="_scenarioLocation", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Population",lazy=True)(pname=(ns,"populations"), aname="_populations", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Infection",lazy=True)(pname=(ns,"infections"), aname="_infections", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Colonization",lazy=True)(pname=(ns,"colonizations"), aname="_colonizations", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Contamination",lazy=True)(pname=(ns,"contaminations"), aname="_contaminations", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ContaminatedThingCensus",lazy=True)(pname=(ns,"contaminatedThingCensuses"), aname="_contaminatedThingCensuses", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","AbioticThingCensus",lazy=True)(pname=(ns,"abioticThingCensuses"), aname="_abioticThingCensuses", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","InfectiousDiseaseControlStrategy",lazy=True)(pname=(ns,"infectiousDiseaseControlStrategies"), aname="_infectiousDiseaseControlStrategies", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ScenarioCartesianOrigin",lazy=True)(pname=(ns,"scenarioCartesianOrigin"), aname="_scenarioCartesianOrigin", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","NonApolloParameter",lazy=True)(pname=(ns,"nonApolloParameters"), aname="_nonApolloParameters", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.RootApolloLibraryItem_Def not in ns2.InfectiousDiseaseScenario_Def.__bases__:
                bases = list(ns2.InfectiousDiseaseScenario_Def.__bases__)
                bases.insert(0, ns2.RootApolloLibraryItem_Def)
                ns2.InfectiousDiseaseScenario_Def.__bases__ = tuple(bases)

            ns2.RootApolloLibraryItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Epidemic_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "Epidemic")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.Epidemic_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","ApolloPathogenCode",lazy=True)(pname=(ns,"causalPathogens"), aname="_causalPathogens", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","EpidemicPeriod",lazy=True)(pname=(ns,"epidemicPeriod"), aname="_epidemicPeriod", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ApolloLocationCode",lazy=True)(pname=(ns,"administrativeLocations"), aname="_administrativeLocations", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ApolloLocationCode",lazy=True)(pname=(ns,"epidemicZones"), aname="_epidemicZones", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Infection",lazy=True)(pname=(ns,"infections"), aname="_infections", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","PreEpidemicEcosystemCensus",lazy=True)(pname=(ns,"preEpidemicCensus"), aname="_preEpidemicCensus", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","PopulationSerologySurvey",lazy=True)(pname=(ns,"populationSerologySurveys"), aname="_populationSerologySurveys", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","PopulationInfectionSurvey",lazy=True)(pname=(ns,"populationInfectionSurveys"), aname="_populationInfectionSurveys", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","InfectiousDiseaseControlStrategy",lazy=True)(pname=(ns,"infectiousDiseaseControlStrategies"), aname="_infectiousDiseaseControlStrategies", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","CaseDefinition",lazy=True)(pname=(ns,"caseDefinitions"), aname="_caseDefinitions", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ContactDefinition",lazy=True)(pname=(ns,"contactDefinitions"), aname="_contactDefinitions", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","CaseList",lazy=True)(pname=(ns,"caseLists"), aname="_caseLists", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","CaseCount",lazy=True)(pname=(ns,"caseCounts"), aname="_caseCounts", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","TransmissionTree",lazy=True)(pname=(ns,"transmissionTrees"), aname="_transmissionTrees", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","RelativeRiskDataSet",lazy=True)(pname=(ns,"relativeRiskDataSets"), aname="_relativeRiskDataSets", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"causalPathogenIsolates"), aname="_causalPathogenIsolates", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Reference",lazy=True)(pname=(ns,"references"), aname="_references", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"curator"), aname="_curator", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"editHistory"), aname="_editHistory", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"reviewedBy"), aname="_reviewedBy", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"acknowledgements"), aname="_acknowledgements", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.RootApolloLibraryItem_Def not in ns2.Epidemic_Def.__bases__:
                bases = list(ns2.Epidemic_Def.__bases__)
                bases.insert(0, ns2.RootApolloLibraryItem_Def)
                ns2.Epidemic_Def.__bases__ = tuple(bases)

            ns2.RootApolloLibraryItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AbioticThingCensus_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "AbioticThingCensus")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.AbioticThingCensus_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","AbioticThingEnum",lazy=True)(pname=(ns,"abioticThing"), aname="_abioticThing", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.Census_Def not in ns2.AbioticThingCensus_Def.__bases__:
                bases = list(ns2.AbioticThingCensus_Def.__bases__)
                bases.insert(0, ns2.Census_Def)
                ns2.AbioticThingCensus_Def.__bases__ = tuple(bases)

            ns2.Census_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CompartmentalModelPopulationAndEnvironmentCensus_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "CompartmentalModelPopulationAndEnvironmentCensus")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.CompartmentalModelPopulationAndEnvironmentCensus_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","PopulationInfectionAndImmunityCensusData",lazy=True)(pname=(ns,"bioticEcosystemParts"), aname="_bioticEcosystemParts", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","AbioticThingCensus",lazy=True)(pname=(ns,"abioticEcosystemParts"), aname="_abioticEcosystemParts", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._bioticEcosystemParts = []
                    self._abioticEcosystemParts = []
                    return
            Holder.__name__ = "CompartmentalModelPopulationAndEnvironmentCensus_Holder"
            self.pyclass = Holder

    class PopulationTreatmentCensus_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "PopulationTreatmentCensus")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.PopulationTreatmentCensus_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","NcbiTaxonId",lazy=True)(pname=(ns,"populationSpecies"), aname="_populationSpecies", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","PopulationTreatmentCensusData",lazy=True)(pname=(ns,"treatmentCensusData"), aname="_treatmentCensusData", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.Census_Def not in ns2.PopulationTreatmentCensus_Def.__bases__:
                bases = list(ns2.PopulationTreatmentCensus_Def.__bases__)
                bases.insert(0, ns2.Census_Def)
                ns2.PopulationTreatmentCensus_Def.__bases__ = tuple(bases)

            ns2.Census_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ContaminationAcquisition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ContaminationAcquisition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.ContaminationAcquisition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","NcbiTaxonId",lazy=True)(pname=(ns,"infectiousHostSource"), aname="_infectiousHostSource", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"contaminatedSource"), aname="_contaminatedSource", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","NcbiTaxonId",lazy=True)(pname=(ns,"colonizedHostSource"), aname="_colonizedHostSource", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ProbabilisticParameter",lazy=True)(pname=(ns,"transmissionProbability"), aname="_transmissionProbability", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._infectiousHostSource = None
                    self._contaminatedSource = None
                    self._colonizedHostSource = None
                    self._transmissionProbability = None
                    return
            Holder.__name__ = "ContaminationAcquisition_Holder"
            self.pyclass = Holder

    class PopulationCensusDescription_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "PopulationCensusDescription")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.PopulationCensusDescription_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","NcbiTaxonId",lazy=True)(pname=(ns,"populationSpecies"), aname="_populationSpecies", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"characteristics"), aname="_characteristics", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Location",lazy=True)(pname=(ns,"locations"), aname="_locations", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._populationSpecies = None
                    self._characteristics = []
                    self._locations = []
                    return
            Holder.__name__ = "PopulationCensusDescription_Holder"
            self.pyclass = Holder

    class AbioticEcosystemElementCensusDescription_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "AbioticEcosystemElementCensusDescription")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.AbioticEcosystemElementCensusDescription_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"abioticElementID"), aname="_abioticElementID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"characteristics"), aname="_characteristics", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._abioticElementID = None
                    self._characteristics = []
                    return
            Holder.__name__ = "AbioticEcosystemElementCensusDescription_Holder"
            self.pyclass = Holder

    class ContaminatedThingCensus_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ContaminatedThingCensus")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.ContaminatedThingCensus_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","AbioticThingEnum",lazy=True)(pname=(ns,"kindOfThing"), aname="_kindOfThing", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ApolloPathogenCode",lazy=True)(pname=(ns,"pathogen"), aname="_pathogen", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ContaminatedThingCensusData",lazy=True)(pname=(ns,"censusData"), aname="_censusData", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.Census_Def not in ns2.ContaminatedThingCensus_Def.__bases__:
                bases = list(ns2.ContaminatedThingCensus_Def.__bases__)
                bases.insert(0, ns2.Census_Def)
                ns2.ContaminatedThingCensus_Def.__bases__ = tuple(bases)

            ns2.Census_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ContaminatedThingCensusData_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ContaminatedThingCensusData")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.ContaminatedThingCensusData_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","Fraction",lazy=True)(pname=(ns,"fractionContaminated"), aname="_fractionContaminated", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ContaminatedThingCensusData",lazy=True)(pname=(ns,"exceptionSublocations"), aname="_exceptionSublocations", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.CensusData_Def not in ns2.ContaminatedThingCensusData_Def.__bases__:
                bases = list(ns2.ContaminatedThingCensusData_Def.__bases__)
                bases.insert(0, ns2.CensusData_Def)
                ns2.ContaminatedThingCensusData_Def.__bases__ = tuple(bases)

            ns2.CensusData_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PreEpidemicEcosystemCensus_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "PreEpidemicEcosystemCensus")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.PreEpidemicEcosystemCensus_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"nameOfAdministrativeUnit"), aname="_nameOfAdministrativeUnit", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"numberOfPeople"), aname="_numberOfPeople", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"numberOfHouseholds"), aname="_numberOfHouseholds", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"numberOfSchools"), aname="_numberOfSchools", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"numberOfWorkplaces"), aname="_numberOfWorkplaces", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"additionalDescription"), aname="_additionalDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","PreEpidemicEcosystemCensus",lazy=True)(pname=(ns,"subLocationCensuses"), aname="_subLocationCensuses", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"referenceId"), aname="_referenceId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._nameOfAdministrativeUnit = None
                    self._numberOfPeople = None
                    self._numberOfHouseholds = None
                    self._numberOfSchools = None
                    self._numberOfWorkplaces = None
                    self._additionalDescription = None
                    self._subLocationCensuses = []
                    self._referenceId = None
                    return
            Holder.__name__ = "PreEpidemicEcosystemCensus_Holder"
            self.pyclass = Holder

    class PopulationAndEnvironmentCensus_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "PopulationAndEnvironmentCensus")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.PopulationAndEnvironmentCensus_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","Location",lazy=True)(pname=(ns,"locationId"), aname="_locationId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"numberOfPeople"), aname="_numberOfPeople", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"numberOfSchools"), aname="_numberOfSchools", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"numberOfWorkplaces"), aname="_numberOfWorkplaces", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","PopulationAndEnvironmentCensus",lazy=True)(pname=(ns,"subLocationCensuses"), aname="_subLocationCensuses", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.Census_Def not in ns2.PopulationAndEnvironmentCensus_Def.__bases__:
                bases = list(ns2.PopulationAndEnvironmentCensus_Def.__bases__)
                bases.insert(0, ns2.Census_Def)
                ns2.PopulationAndEnvironmentCensus_Def.__bases__ = tuple(bases)

            ns2.Census_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class InfectiousDisease_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "InfectiousDisease")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.InfectiousDisease_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","SnomedId",lazy=True)(pname=(ns,"disease"), aname="_disease", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","NcbiTaxonId",lazy=True)(pname=(ns,"speciesWithDisease"), aname="_speciesWithDisease", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ApolloPathogenCode",lazy=True)(pname=(ns,"causalPathogen"), aname="_causalPathogen", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Duration",lazy=True)(pname=(ns,"incubationPeriod"), aname="_incubationPeriod", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Duration",lazy=True)(pname=(ns,"prodromalPeriod"), aname="_prodromalPeriod", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Duration",lazy=True)(pname=(ns,"fulminantPeriod"), aname="_fulminantPeriod", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Interval",lazy=True)(pname=(ns,"otherIntervals"), aname="_otherIntervals", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","DiseaseOutcomeWithProbability",lazy=True)(pname=(ns,"diseaseOutcomesWithProbabilities"), aname="_diseaseOutcomesWithProbabilities", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.RootApolloLibraryItem_Def not in ns2.InfectiousDisease_Def.__bases__:
                bases = list(ns2.InfectiousDisease_Def.__bases__)
                bases.insert(0, ns2.RootApolloLibraryItem_Def)
                ns2.InfectiousDisease_Def.__bases__ = tuple(bases)

            ns2.RootApolloLibraryItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class FractionOfThingContaminated_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "FractionOfThingContaminated")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.FractionOfThingContaminated_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","AbioticThingEnum",lazy=True)(pname=(ns,"abioticEcosystemElement"), aname="_abioticEcosystemElement", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Fraction",lazy=True)(pname=(ns,"fraction"), aname="_fraction", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._abioticEcosystemElement = None
                    self._fraction = None
                    return
            Holder.__name__ = "FractionOfThingContaminated_Holder"
            self.pyclass = Holder

    class ApolloPathogenCode_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ApolloPathogenCode")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.ApolloPathogenCode_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","NcbiTaxonId",lazy=True)(pname=(ns,"ncbiTaxonId"), aname="_ncbiTaxonId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"cladeName"), aname="_cladeName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ncbiTaxonId = None
                    self._cladeName = None
                    return
            Holder.__name__ = "ApolloPathogenCode_Holder"
            self.pyclass = Holder

    class NcbiTaxonId_Def(ZSI.TC.Token, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "NcbiTaxonId")
        def __init__(self, pname, **kw):
            ZSI.TC.Token.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SnomedId_Def(ZSI.TC.Token, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "SnomedId")
        def __init__(self, pname, **kw):
            ZSI.TC.Token.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class vaccineOntologyId_Def(ZSI.TC.Token, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "vaccineOntologyId")
        def __init__(self, pname, **kw):
            ZSI.TC.Token.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RxNormId_Def(ZSI.TC.Token, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "RxNormId")
        def __init__(self, pname, **kw):
            ZSI.TC.Token.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ProbabilityValuePair_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ProbabilityValuePair")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.ProbabilityValuePair_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"value"), aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Probability",lazy=True)(pname=(ns,"probability"), aname="_probability", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._value = None
                    self._probability = None
                    return
            Holder.__name__ = "ProbabilityValuePair_Holder"
            self.pyclass = Holder

    class UncertainValue_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "UncertainValue")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.UncertainValue_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "UncertainValue_Holder"
            self.pyclass = Holder

    class ProbabilityDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ProbabilityDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.ProbabilityDistribution_Def.schema
            TClist = [ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"referenceId"), aname="_referenceId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.UncertainValue_Def not in ns2.ProbabilityDistribution_Def.__bases__:
                bases = list(ns2.ProbabilityDistribution_Def.__bases__)
                bases.insert(0, ns2.UncertainValue_Def)
                ns2.ProbabilityDistribution_Def.__bases__ = tuple(bases)

            ns2.UncertainValue_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class UnconditionalProbabilityDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "UnconditionalProbabilityDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.UnconditionalProbabilityDistribution_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.ProbabilityDistribution_Def not in ns2.UnconditionalProbabilityDistribution_Def.__bases__:
                bases = list(ns2.UnconditionalProbabilityDistribution_Def.__bases__)
                bases.insert(0, ns2.ProbabilityDistribution_Def)
                ns2.UnconditionalProbabilityDistribution_Def.__bases__ = tuple(bases)

            ns2.ProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NonparametricProbabilityDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "NonparametricProbabilityDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.NonparametricProbabilityDistribution_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.UnconditionalProbabilityDistribution_Def not in ns2.NonparametricProbabilityDistribution_Def.__bases__:
                bases = list(ns2.NonparametricProbabilityDistribution_Def.__bases__)
                bases.insert(0, ns2.UnconditionalProbabilityDistribution_Def)
                ns2.NonparametricProbabilityDistribution_Def.__bases__ = tuple(bases)

            ns2.UnconditionalProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ParametricProbabilityDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ParametricProbabilityDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.ParametricProbabilityDistribution_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.UnconditionalProbabilityDistribution_Def not in ns2.ParametricProbabilityDistribution_Def.__bases__:
                bases = list(ns2.ParametricProbabilityDistribution_Def.__bases__)
                bases.insert(0, ns2.UnconditionalProbabilityDistribution_Def)
                ns2.ParametricProbabilityDistribution_Def.__bases__ = tuple(bases)

            ns2.UnconditionalProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DiscreteParametricProbabilityDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "DiscreteParametricProbabilityDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.DiscreteParametricProbabilityDistribution_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.ParametricProbabilityDistribution_Def not in ns2.DiscreteParametricProbabilityDistribution_Def.__bases__:
                bases = list(ns2.DiscreteParametricProbabilityDistribution_Def.__bases__)
                bases.insert(0, ns2.ParametricProbabilityDistribution_Def)
                ns2.DiscreteParametricProbabilityDistribution_Def.__bases__ = tuple(bases)

            ns2.ParametricProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ContinuousParametricProbabilityDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ContinuousParametricProbabilityDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.ContinuousParametricProbabilityDistribution_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.ParametricProbabilityDistribution_Def not in ns2.ContinuousParametricProbabilityDistribution_Def.__bases__:
                bases = list(ns2.ContinuousParametricProbabilityDistribution_Def.__bases__)
                bases.insert(0, ns2.ParametricProbabilityDistribution_Def)
                ns2.ContinuousParametricProbabilityDistribution_Def.__bases__ = tuple(bases)

            ns2.ParametricProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LogNormalDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "LogNormalDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.LogNormalDistribution_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"mean"), aname="_mean", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","NonNegativeDouble",lazy=True)(pname=(ns,"standardDeviation"), aname="_standardDeviation", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","NonNegativeDouble",lazy=True)(pname=(ns,"shiftRight"), aname="_shiftRight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","PositiveDouble",lazy=True)(pname=(ns,"cutTailAt"), aname="_cutTailAt", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.ContinuousParametricProbabilityDistribution_Def not in ns2.LogNormalDistribution_Def.__bases__:
                bases = list(ns2.LogNormalDistribution_Def.__bases__)
                bases.insert(0, ns2.ContinuousParametricProbabilityDistribution_Def)
                ns2.LogNormalDistribution_Def.__bases__ = tuple(bases)

            ns2.ContinuousParametricProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NormalDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "NormalDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.NormalDistribution_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"mean"), aname="_mean", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","NonNegativeDouble",lazy=True)(pname=(ns,"standardDeviation"), aname="_standardDeviation", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","NonNegativeDouble",lazy=True)(pname=(ns,"shiftRight"), aname="_shiftRight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","PositiveDouble",lazy=True)(pname=(ns,"cutTailAt"), aname="_cutTailAt", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.ContinuousParametricProbabilityDistribution_Def not in ns2.NormalDistribution_Def.__bases__:
                bases = list(ns2.NormalDistribution_Def.__bases__)
                bases.insert(0, ns2.ContinuousParametricProbabilityDistribution_Def)
                ns2.NormalDistribution_Def.__bases__ = tuple(bases)

            ns2.ContinuousParametricProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GammaDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "GammaDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.GammaDistribution_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","PositiveDouble",lazy=True)(pname=(ns,"k-shape"), aname="_k_shape", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","PositiveDouble",lazy=True)(pname=(ns,"theta-scale"), aname="_theta_scale", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","NonNegativeDouble",lazy=True)(pname=(ns,"shiftRight"), aname="_shiftRight", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","PositiveDouble",lazy=True)(pname=(ns,"cutTailAt"), aname="_cutTailAt", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.ContinuousParametricProbabilityDistribution_Def not in ns2.GammaDistribution_Def.__bases__:
                bases = list(ns2.GammaDistribution_Def.__bases__)
                bases.insert(0, ns2.ContinuousParametricProbabilityDistribution_Def)
                ns2.GammaDistribution_Def.__bases__ = tuple(bases)

            ns2.ContinuousParametricProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class WeibullDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "WeibullDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.WeibullDistribution_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","PositiveDouble",lazy=True)(pname=(ns,"k-shape"), aname="_k_shape", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","PositiveDouble",lazy=True)(pname=(ns,"lambda-scale"), aname="_lambda_scale", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","NonNegativeDouble",lazy=True)(pname=(ns,"shiftRight"), aname="_shiftRight", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","PositiveDouble",lazy=True)(pname=(ns,"cutTailAt"), aname="_cutTailAt", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.ContinuousParametricProbabilityDistribution_Def not in ns2.WeibullDistribution_Def.__bases__:
                bases = list(ns2.WeibullDistribution_Def.__bases__)
                bases.insert(0, ns2.ContinuousParametricProbabilityDistribution_Def)
                ns2.WeibullDistribution_Def.__bases__ = tuple(bases)

            ns2.ContinuousParametricProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ContinuousUniformDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ContinuousUniformDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.ContinuousUniformDistribution_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"minimumValue"), aname="_minimumValue", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"maximumValue"), aname="_maximumValue", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.ContinuousParametricProbabilityDistribution_Def not in ns2.ContinuousUniformDistribution_Def.__bases__:
                bases = list(ns2.ContinuousUniformDistribution_Def.__bases__)
                bases.insert(0, ns2.ContinuousParametricProbabilityDistribution_Def)
                ns2.ContinuousUniformDistribution_Def.__bases__ = tuple(bases)

            ns2.ContinuousParametricProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MeanWithConfidenceInterval_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "MeanWithConfidenceInterval")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.MeanWithConfidenceInterval_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"mean"), aname="_mean", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"lowerBound"), aname="_lowerBound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"upperBound"), aname="_upperBound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Percent",lazy=True)(pname=(ns,"confidence"), aname="_confidence", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"sampleSize"), aname="_sampleSize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.ProbabilityDistribution_Def not in ns2.MeanWithConfidenceInterval_Def.__bases__:
                bases = list(ns2.MeanWithConfidenceInterval_Def.__bases__)
                bases.insert(0, ns2.ProbabilityDistribution_Def)
                ns2.MeanWithConfidenceInterval_Def.__bases__ = tuple(bases)

            ns2.ProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MeanWithStandardDeviation_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "MeanWithStandardDeviation")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.MeanWithStandardDeviation_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"mean"), aname="_mean", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","NonNegativeDouble",lazy=True)(pname=(ns,"standardDeviation"), aname="_standardDeviation", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"sampleSize"), aname="_sampleSize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.ProbabilityDistribution_Def not in ns2.MeanWithStandardDeviation_Def.__bases__:
                bases = list(ns2.MeanWithStandardDeviation_Def.__bases__)
                bases.insert(0, ns2.ProbabilityDistribution_Def)
                ns2.MeanWithStandardDeviation_Def.__bases__ = tuple(bases)

            ns2.ProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MeanMedianMinimumMaximum_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "MeanMedianMinimumMaximum")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.MeanMedianMinimumMaximum_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"mean"), aname="_mean", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"median"), aname="_median", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"minimumValue"), aname="_minimumValue", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"maximumValue"), aname="_maximumValue", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"sampleSize"), aname="_sampleSize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.ProbabilityDistribution_Def not in ns2.MeanMedianMinimumMaximum_Def.__bases__:
                bases = list(ns2.MeanMedianMinimumMaximum_Def.__bases__)
                bases.insert(0, ns2.ProbabilityDistribution_Def)
                ns2.MeanMedianMinimumMaximum_Def.__bases__ = tuple(bases)

            ns2.ProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ConditionalProbabilityDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ConditionalProbabilityDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.ConditionalProbabilityDistribution_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","ConditioningVariable",lazy=True)(pname=(ns,"firstConditioningVariable"), aname="_firstConditioningVariable", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.ProbabilityDistribution_Def not in ns2.ConditionalProbabilityDistribution_Def.__bases__:
                bases = list(ns2.ConditionalProbabilityDistribution_Def.__bases__)
                bases.insert(0, ns2.ProbabilityDistribution_Def)
                ns2.ConditionalProbabilityDistribution_Def.__bases__ = tuple(bases)

            ns2.ProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ConditioningVariable_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ConditioningVariable")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.ConditioningVariable_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","ConditioningVariableEnum",lazy=True)(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Category",lazy=True)(pname=(ns,"categories"), aname="_categories", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._categories = []
                    return
            Holder.__name__ = "ConditioningVariable_Holder"
            self.pyclass = Holder

    class Category_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "Category")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.Category_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","CategoryDefinition",lazy=True)(pname=(ns,"categoryDefinition"), aname="_categoryDefinition", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","UnconditionalProbabilityDistribution",lazy=True)(pname=(ns,"unconditionalProbabilityDistribution"), aname="_unconditionalProbabilityDistribution", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ConditioningVariable",lazy=True)(pname=(ns,"conditioningVariable"), aname="_conditioningVariable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._categoryDefinition = None
                    self._unconditionalProbabilityDistribution = None
                    self._conditioningVariable = None
                    return
            Holder.__name__ = "Category_Holder"
            self.pyclass = Holder

    class ArrayAxis_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ArrayAxis")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.ArrayAxis_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","ConditioningVariableEnum",lazy=True)(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","CaseCountCategory",lazy=True)(pname=(ns,"categories"), aname="_categories", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._categories = []
                    return
            Holder.__name__ = "ArrayAxis_Holder"
            self.pyclass = Holder

    class CaseCountCategory_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "CaseCountCategory")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.CaseCountCategory_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","CategoryDefinition",lazy=True)(pname=(ns,"categoryDefinition"), aname="_categoryDefinition", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"count"), aname="_count", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ArrayAxis",lazy=True)(pname=(ns,"arrayAxis"), aname="_arrayAxis", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._categoryDefinition = None
                    self._count = None
                    self._arrayAxis = None
                    return
            Holder.__name__ = "CaseCountCategory_Holder"
            self.pyclass = Holder

    class VariableCategoryDefinition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "VariableCategoryDefinition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.VariableCategoryDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","CategoryDefinition",lazy=True)(pname=(ns,"categories"), aname="_categories", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._categories = []
                    return
            Holder.__name__ = "VariableCategoryDefinition_Holder"
            self.pyclass = Holder

    class CategoryDefinition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "CategoryDefinition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.CategoryDefinition_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "CategoryDefinition_Holder"
            self.pyclass = Holder

    class AbioticThingEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "AbioticThingEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ConditioningVariableEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ConditioningVariableEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RootApolloLibraryItemTypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "RootApolloLibraryItemTypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class UnitOfMeasureEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "UnitOfMeasureEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class UnitOfDistanceEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "UnitOfDistanceEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DiseaseOutcomeWithProbability_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "DiseaseOutcomeWithProbability")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.DiseaseOutcomeWithProbability_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"title"), aname="_title", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","DiseaseOutcomeEnum",lazy=True)(pname=(ns,"diseaseOutcome"), aname="_diseaseOutcome", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ProbabilisticParameter",lazy=True)(pname=(ns,"probability"), aname="_probability", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._title = None
                    self._diseaseOutcome = None
                    self._probability = None
                    return
            Holder.__name__ = "DiseaseOutcomeWithProbability_Holder"
            self.pyclass = Holder

    class SeasonalityFunctionParameters_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "SeasonalityFunctionParameters")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.SeasonalityFunctionParameters_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"maximumSeasonalLatitude"), aname="_maximumSeasonalLatitude", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"minimumSeasonalLatitude"), aname="_minimumSeasonalLatitude", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"seasonalTemporalOffset"), aname="_seasonalTemporalOffset", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._maximumSeasonalLatitude = None
                    self._minimumSeasonalLatitude = None
                    self._seasonalTemporalOffset = None
                    return
            Holder.__name__ = "SeasonalityFunctionParameters_Holder"
            self.pyclass = Holder

    class SpatialKernelFunctionParameters_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "SpatialKernelFunctionParameters")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.SpatialKernelFunctionParameters_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"type"), aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"a0"), aname="_a0", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"a1"), aname="_a1", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"b0"), aname="_b0", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"b1"), aname="_b1", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"c1"), aname="_c1", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"cutoff"), aname="_cutoff", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._type = None
                    self._a0 = None
                    self._a1 = None
                    self._b0 = None
                    self._b1 = None
                    self._c1 = None
                    self._cutoff = None
                    return
            Holder.__name__ = "SpatialKernelFunctionParameters_Holder"
            self.pyclass = Holder

    class Location_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "Location")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.Location_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","ApolloLocationCode",lazy=True)(pname=(ns,"apolloLocationCode"), aname="_apolloLocationCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","LocationDefinition",lazy=True)(pname=(ns,"locationDefinition"), aname="_locationDefinition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","CartesianCircleLocationDefinition",lazy=True)(pname=(ns,"cartesianCircleLocationDefinition"), aname="_cartesianCircleLocationDefinition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"textualDescription"), aname="_textualDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._apolloLocationCode = None
                    self._locationDefinition = None
                    self._cartesianCircleLocationDefinition = None
                    self._textualDescription = None
                    return
            Holder.__name__ = "Location_Holder"
            self.pyclass = Holder

    class CensusData_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "CensusData")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.CensusData_Def.schema
            TClist = [ZSI.TCtimes.gDateTime(pname=(ns,"date"), aname="_date", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Location",lazy=True)(pname=(ns,"location"), aname="_location", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.RootApolloLibraryItem_Def not in ns2.CensusData_Def.__bases__:
                bases = list(ns2.CensusData_Def.__bases__)
                bases.insert(0, ns2.RootApolloLibraryItem_Def)
                ns2.CensusData_Def.__bases__ = tuple(bases)

            ns2.RootApolloLibraryItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Census_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "Census")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.Census_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Location",lazy=True)(pname=(ns,"location"), aname="_location", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"simulatorTime"), aname="_simulatorTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"referenceDate"), aname="_referenceDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.RootApolloLibraryItem_Def not in ns2.Census_Def.__bases__:
                bases = list(ns2.Census_Def.__bases__)
                bases.insert(0, ns2.RootApolloLibraryItem_Def)
                ns2.Census_Def.__bases__ = tuple(bases)

            ns2.RootApolloLibraryItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PopulationXXX_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "PopulationXXX")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.PopulationXXX_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","NcbiTaxonId",lazy=True)(pname=(ns,"speciesId"), aname="_speciesId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","PopulationAndEnvironmentCensus",lazy=True)(pname=(ns,"census"), aname="_census", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._speciesId = None
                    self._census = None
                    return
            Holder.__name__ = "PopulationXXX_Holder"
            self.pyclass = Holder

    class Individual_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "Individual")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.Individual_Def.schema
            TClist = [ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"individualId"), aname="_individualId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","FixedDuration",lazy=True)(pname=(ns,"age"), aname="_age", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Characteristic",lazy=True)(pname=(ns,"characteristics"), aname="_characteristics", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._individualId = None
                    self._age = None
                    self._characteristics = []
                    return
            Holder.__name__ = "Individual_Holder"
            self.pyclass = Holder

    class IndividualAndEpidemiologicalCharacteristics_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "IndividualAndEpidemiologicalCharacteristics")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.IndividualAndEpidemiologicalCharacteristics_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","IndividualInfection",lazy=True)(pname=(ns,"individualInfection"), aname="_individualInfection", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","IndividualDisease",lazy=True)(pname=(ns,"individualDisease"), aname="_individualDisease", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"exposurePeriodContacts"), aname="_exposurePeriodContacts", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"exposurePeriodDefinition"), aname="_exposurePeriodDefinition", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"transmissionPeriodContacts"), aname="_transmissionPeriodContacts", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"transmissionPeriodDefinition"), aname="_transmissionPeriodDefinition", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.Individual_Def not in ns2.IndividualAndEpidemiologicalCharacteristics_Def.__bases__:
                bases = list(ns2.IndividualAndEpidemiologicalCharacteristics_Def.__bases__)
                bases.insert(0, ns2.Individual_Def)
                ns2.IndividualAndEpidemiologicalCharacteristics_Def.__bases__ = tuple(bases)

            ns2.Individual_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class IndividualInfection_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "IndividualInfection")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.IndividualInfection_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","NcbiTaxonId",lazy=True)(pname=(ns,"pathogenId"), aname="_pathogenId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","InfectionOutcomeWithDate",lazy=True)(pname=(ns,"infectionOutcomesWithDates"), aname="_infectionOutcomesWithDates", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pathogenId = None
                    self._infectionOutcomesWithDates = []
                    return
            Holder.__name__ = "IndividualInfection_Holder"
            self.pyclass = Holder

    class InfectionOutcomeWithDate_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "InfectionOutcomeWithDate")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.InfectionOutcomeWithDate_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","InfectionOutcomeEnum",lazy=True)(pname=(ns,"infectionOutcome"), aname="_infectionOutcome", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"date"), aname="_date", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._infectionOutcome = None
                    self._date = None
                    return
            Holder.__name__ = "InfectionOutcomeWithDate_Holder"
            self.pyclass = Holder

    class InfectionOutcomeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "InfectionOutcomeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class IndividualDisease_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "IndividualDisease")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.IndividualDisease_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","SnomedId",lazy=True)(pname=(ns,"snomedId"), aname="_snomedId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","DiseaseOutcomeWithDate",lazy=True)(pname=(ns,"diseaseOutcomesWithDates"), aname="_diseaseOutcomesWithDates", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._snomedId = None
                    self._diseaseOutcomesWithDates = []
                    return
            Holder.__name__ = "IndividualDisease_Holder"
            self.pyclass = Holder

    class DiseaseOutcomeWithDate_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "DiseaseOutcomeWithDate")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.DiseaseOutcomeWithDate_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","InfectionOutcomeEnum",lazy=True)(pname=(ns,"infectionOutcome"), aname="_infectionOutcome", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"date"), aname="_date", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._infectionOutcome = None
                    self._date = None
                    return
            Holder.__name__ = "DiseaseOutcomeWithDate_Holder"
            self.pyclass = Holder

    class ConditionalIndividualBehavior_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ConditionalIndividualBehavior")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.ConditionalIndividualBehavior_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","BehaviorEnum",lazy=True)(pname=(ns,"behavior"), aname="_behavior", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ConditionalProbabilityDistribution",lazy=True)(pname=(ns,"conditionalProbability"), aname="_conditionalProbability", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.Behavior_Def not in ns2.ConditionalIndividualBehavior_Def.__bases__:
                bases = list(ns2.ConditionalIndividualBehavior_Def.__bases__)
                bases.insert(0, ns2.Behavior_Def)
                ns2.ConditionalIndividualBehavior_Def.__bases__ = tuple(bases)

            ns2.Behavior_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BehaviorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "BehaviorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PlaceClosureControlStrategy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "PlaceClosureControlStrategy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.PlaceClosureControlStrategy_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","PlaceEnum",lazy=True)(pname=(ns,"placeClass"), aname="_placeClass", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"closeIndividualPlacesIndependently"), aname="_closeIndividualPlacesIndependently", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Duration",lazy=True)(pname=(ns,"closurePeriod"), aname="_closurePeriod", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","NonNegativeDouble",lazy=True)(pname=(ns,"householdTransmissionMultiplier"), aname="_householdTransmissionMultiplier", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","NonNegativeDouble",lazy=True)(pname=(ns,"communityTransmissionMultiplier"), aname="_communityTransmissionMultiplier", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.InfectiousDiseaseControlStrategy_Def not in ns2.PlaceClosureControlStrategy_Def.__bases__:
                bases = list(ns2.PlaceClosureControlStrategy_Def.__bases__)
                bases.insert(0, ns2.InfectiousDiseaseControlStrategy_Def)
                ns2.PlaceClosureControlStrategy_Def.__bases__ = tuple(bases)

            ns2.InfectiousDiseaseControlStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CaseQuarantineControlStrategy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "CaseQuarantineControlStrategy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.CaseQuarantineControlStrategy_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","Duration",lazy=True)(pname=(ns,"quarantinePeriod"), aname="_quarantinePeriod", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ProbabilisticParameter",lazy=True)(pname=(ns,"compliance"), aname="_compliance", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","NonNegativeDouble",lazy=True)(pname=(ns,"householdTransmissionMultiplier"), aname="_householdTransmissionMultiplier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","NonNegativeDouble",lazy=True)(pname=(ns,"schoolTransmissionMultiplier"), aname="_schoolTransmissionMultiplier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","NonNegativeDouble",lazy=True)(pname=(ns,"workplaceTransmissionMultiplier"), aname="_workplaceTransmissionMultiplier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.InfectiousDiseaseControlStrategy_Def not in ns2.CaseQuarantineControlStrategy_Def.__bases__:
                bases = list(ns2.CaseQuarantineControlStrategy_Def.__bases__)
                bases.insert(0, ns2.InfectiousDiseaseControlStrategy_Def)
                ns2.CaseQuarantineControlStrategy_Def.__bases__ = tuple(bases)

            ns2.InfectiousDiseaseControlStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ContactIsolationControlStrategy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ContactIsolationControlStrategy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.ContactIsolationControlStrategy_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","ContactDefinition",lazy=True)(pname=(ns,"contactDefinition"), aname="_contactDefinition", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Duration",lazy=True)(pname=(ns,"isolationPeriod"), aname="_isolationPeriod", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ProbabilisticParameter",lazy=True)(pname=(ns,"compliance"), aname="_compliance", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ProbabilityDistribution",lazy=True)(pname=(ns,"efficacy"), aname="_efficacy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.InfectiousDiseaseControlStrategy_Def not in ns2.ContactIsolationControlStrategy_Def.__bases__:
                bases = list(ns2.ContactIsolationControlStrategy_Def.__bases__)
                bases.insert(0, ns2.InfectiousDiseaseControlStrategy_Def)
                ns2.ContactIsolationControlStrategy_Def.__bases__ = tuple(bases)

            ns2.InfectiousDiseaseControlStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BorderControlStrategy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "BorderControlStrategy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.BorderControlStrategy_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","Probability",lazy=True)(pname=(ns,"probabilityEntryDenied"), aname="_probabilityEntryDenied", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Probability",lazy=True)(pname=(ns,"probabilityExitDenied"), aname="_probabilityExitDenied", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.InfectiousDiseaseControlStrategy_Def not in ns2.BorderControlStrategy_Def.__bases__:
                bases = list(ns2.BorderControlStrategy_Def.__bases__)
                bases.insert(0, ns2.InfectiousDiseaseControlStrategy_Def)
                ns2.BorderControlStrategy_Def.__bases__ = tuple(bases)

            ns2.InfectiousDiseaseControlStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class VectorControlStrategy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "VectorControlStrategy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.VectorControlStrategy_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","NcbiTaxonId",lazy=True)(pname=(ns,"vectorTaxonId"), aname="_vectorTaxonId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.InfectiousDiseaseControlStrategy_Def not in ns2.VectorControlStrategy_Def.__bases__:
                bases = list(ns2.VectorControlStrategy_Def.__bases__)
                bases.insert(0, ns2.InfectiousDiseaseControlStrategy_Def)
                ns2.VectorControlStrategy_Def.__bases__ = tuple(bases)

            ns2.InfectiousDiseaseControlStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class InsecticideTreatedNetControlStrategy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "InsecticideTreatedNetControlStrategy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.InsecticideTreatedNetControlStrategy_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","Rate",lazy=True)(pname=(ns,"netHolingRate"), aname="_netHolingRate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Probability",lazy=True)(pname=(ns,"nightlyProbabilityOfUse"), aname="_nightlyProbabilityOfUse", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Rate",lazy=True)(pname=(ns,"insecticideEfficacyDecayRate"), aname="_insecticideEfficacyDecayRate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.VectorControlStrategy_Def not in ns2.InsecticideTreatedNetControlStrategy_Def.__bases__:
                bases = list(ns2.InsecticideTreatedNetControlStrategy_Def.__bases__)
                bases.insert(0, ns2.VectorControlStrategy_Def)
                ns2.InsecticideTreatedNetControlStrategy_Def.__bases__ = tuple(bases)

            ns2.VectorControlStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class WolbachiaControlStrategy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "WolbachiaControlStrategy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.WolbachiaControlStrategy_Def.schema
            TClist = [ZSI.TCnumbers.IpositiveInteger(pname=(ns,"wolbachiaSitesEveryNth"), aname="_wolbachiaSitesEveryNth", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"wolbachiaSeedAdultsPerHouse"), aname="_wolbachiaSeedAdultsPerHouse", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"clearWolbachiaOnMigration"), aname="_clearWolbachiaOnMigration", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","FixedDuration",lazy=True)(pname=(ns,"wolbachiaReleaseInterval"), aname="_wolbachiaReleaseInterval", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","WolbachiaReleaseSiteEnum",lazy=True)(pname=(ns,"wolbachiaReleaseSites"), aname="_wolbachiaReleaseSites", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Fraction",lazy=True)(pname=(ns,"wolbachiaEffectOnEggMortalityRate"), aname="_wolbachiaEffectOnEggMortalityRate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Fraction",lazy=True)(pname=(ns,"wolbachiaEffectOnAdultMortalityRate"), aname="_wolbachiaEffectOnAdultMortalityRate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Fraction",lazy=True)(pname=(ns,"wolbachiaEffectOnLarvalMortalityRate"), aname="_wolbachiaEffectOnLarvalMortalityRate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Fraction",lazy=True)(pname=(ns,"wolbachiaEffectOnFecundity"), aname="_wolbachiaEffectOnFecundity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Fraction",lazy=True)(pname=(ns,"wolbachiaEffectOnMatingProbability"), aname="_wolbachiaEffectOnMatingProbability", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Fraction",lazy=True)(pname=(ns,"wolbachiaEffectOnLeakageRate"), aname="_wolbachiaEffectOnLeakageRate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Fraction",lazy=True)(pname=(ns,"wolbachiaEffectOnVectorialCapacity"), aname="_wolbachiaEffectOnVectorialCapacity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Fraction",lazy=True)(pname=(ns,"wolbachiaPreReleaseAdultSuppressionEfficacy"), aname="_wolbachiaPreReleaseAdultSuppressionEfficacy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Fraction",lazy=True)(pname=(ns,"wolbachiaPreReleaseLarvalSuppressionEfficacy"), aname="_wolbachiaPreReleaseLarvalSuppressionEfficacy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.VectorControlStrategy_Def not in ns2.WolbachiaControlStrategy_Def.__bases__:
                bases = list(ns2.WolbachiaControlStrategy_Def.__bases__)
                bases.insert(0, ns2.VectorControlStrategy_Def)
                ns2.WolbachiaControlStrategy_Def.__bases__ = tuple(bases)

            ns2.VectorControlStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class WolbachiaReleaseSiteEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "WolbachiaReleaseSiteEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class LarvicideControlStrategy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "LarvicideControlStrategy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.LarvicideControlStrategy_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","Distance",lazy=True)(pname=(ns,"coverRadius"), aname="_coverRadius", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.VectorControlStrategy_Def not in ns2.LarvicideControlStrategy_Def.__bases__:
                bases = list(ns2.LarvicideControlStrategy_Def.__bases__)
                bases.insert(0, ns2.VectorControlStrategy_Def)
                ns2.LarvicideControlStrategy_Def.__bases__ = tuple(bases)

            ns2.VectorControlStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class IndoorResidualSprayingVectorControlStrategy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "IndoorResidualSprayingVectorControlStrategy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.IndoorResidualSprayingVectorControlStrategy_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","Distance",lazy=True)(pname=(ns,"coverRadius"), aname="_coverRadius", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Fraction",lazy=True)(pname=(ns,"fractionOfVectorIndividualsAffected"), aname="_fractionOfVectorIndividualsAffected", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.VectorControlStrategy_Def not in ns2.IndoorResidualSprayingVectorControlStrategy_Def.__bases__:
                bases = list(ns2.IndoorResidualSprayingVectorControlStrategy_Def.__bases__)
                bases.insert(0, ns2.VectorControlStrategy_Def)
                ns2.IndoorResidualSprayingVectorControlStrategy_Def.__bases__ = tuple(bases)

            ns2.VectorControlStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ContainerReductionControlStrategy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ContainerReductionControlStrategy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.ContainerReductionControlStrategy_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","Distance",lazy=True)(pname=(ns,"coverRadius"), aname="_coverRadius", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Fraction",lazy=True)(pname=(ns,"fractionReductionOfEggs"), aname="_fractionReductionOfEggs", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Fraction",lazy=True)(pname=(ns,"fractionReductionOfLarvae"), aname="_fractionReductionOfLarvae", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.VectorControlStrategy_Def not in ns2.ContainerReductionControlStrategy_Def.__bases__:
                bases = list(ns2.ContainerReductionControlStrategy_Def.__bases__)
                bases.insert(0, ns2.VectorControlStrategy_Def)
                ns2.ContainerReductionControlStrategy_Def.__bases__ = tuple(bases)

            ns2.VectorControlStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DecolonizationControlStrategy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "DecolonizationControlStrategy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.DecolonizationControlStrategy_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","Probability",lazy=True)(pname=(ns,"relapseProbability"), aname="_relapseProbability", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"relapseInterval"), aname="_relapseInterval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.IndividualTreatmentControlStrategy_Def not in ns2.DecolonizationControlStrategy_Def.__bases__:
                bases = list(ns2.DecolonizationControlStrategy_Def.__bases__)
                bases.insert(0, ns2.IndividualTreatmentControlStrategy_Def)
                ns2.DecolonizationControlStrategy_Def.__bases__ = tuple(bases)

            ns2.IndividualTreatmentControlStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Percent_Def(ZSI.TCnumbers.InonNegativeInteger, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "Percent")
        def __init__(self, pname, **kw):
            ZSI.TCnumbers.InonNegativeInteger.__init__(self, pname, pyclass=None, **kw)
            class Holder(int):
                typecode = self
            self.pyclass = Holder

    class Latitude_Def(ZSI.TCnumbers.FPdouble, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "Latitude")
        def __init__(self, pname, **kw):
            ZSI.TCnumbers.FPdouble.__init__(self, pname, pyclass=None, **kw)
            class Holder(float):
                typecode = self
            self.pyclass = Holder

    class Longitude_Def(ZSI.TCnumbers.FPdouble, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "Longitude")
        def __init__(self, pname, **kw):
            ZSI.TCnumbers.FPdouble.__init__(self, pname, pyclass=None, **kw)
            class Holder(float):
                typecode = self
            self.pyclass = Holder

    class TravelRestrictionControlStrategy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "TravelRestrictionControlStrategy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.TravelRestrictionControlStrategy_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","NonNegativeDouble",lazy=True)(pname=(ns,"maximumTravelDistanceInKm"), aname="_maximumTravelDistanceInKm", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ProbabilisticParameter",lazy=True)(pname=(ns,"compliance"), aname="_compliance", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.InfectiousDiseaseControlStrategy_Def not in ns2.TravelRestrictionControlStrategy_Def.__bases__:
                bases = list(ns2.TravelRestrictionControlStrategy_Def.__bases__)
                bases.insert(0, ns2.InfectiousDiseaseControlStrategy_Def)
                ns2.TravelRestrictionControlStrategy_Def.__bases__ = tuple(bases)

            ns2.InfectiousDiseaseControlStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DiseaseSurveillanceCapability_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "DiseaseSurveillanceCapability")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.DiseaseSurveillanceCapability_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","Location",lazy=True)(pname=(ns,"location"), aname="_location", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ApolloPathogenCode",lazy=True)(pname=(ns,"pathogen"), aname="_pathogen", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","NcbiTaxonId",lazy=True)(pname=(ns,"speciesOfCase"), aname="_speciesOfCase", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","DiseaseOutcomeEnum",lazy=True)(pname=(ns,"caseDefinition"), aname="_caseDefinition", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Probability",lazy=True)(pname=(ns,"sensitivityOfCaseDetection"), aname="_sensitivityOfCaseDetection", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Probability",lazy=True)(pname=(ns,"specificityOfCaseDetection"), aname="_specificityOfCaseDetection", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Duration",lazy=True)(pname=(ns,"timeDelayOfCaseDetection"), aname="_timeDelayOfCaseDetection", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._location = None
                    self._pathogen = None
                    self._speciesOfCase = None
                    self._caseDefinition = None
                    self._sensitivityOfCaseDetection = None
                    self._specificityOfCaseDetection = None
                    self._timeDelayOfCaseDetection = None
                    return
            Holder.__name__ = "DiseaseSurveillanceCapability_Holder"
            self.pyclass = Holder

    class TreatmentSurveillanceCapability_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "TreatmentSurveillanceCapability")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.TreatmentSurveillanceCapability_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","Location",lazy=True)(pname=(ns,"location"), aname="_location", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","IndividualTreatmentEnum",lazy=True)(pname=(ns,"treatment"), aname="_treatment", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Probability",lazy=True)(pname=(ns,"sensitivityOfTreatmentDetection"), aname="_sensitivityOfTreatmentDetection", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Probability",lazy=True)(pname=(ns,"specificityOfTreatmentDetection"), aname="_specificityOfTreatmentDetection", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Duration",lazy=True)(pname=(ns,"timeDelayOfTreatmentDetection"), aname="_timeDelayOfTreatmentDetection", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._location = None
                    self._treatment = None
                    self._sensitivityOfTreatmentDetection = None
                    self._specificityOfTreatmentDetection = None
                    self._timeDelayOfTreatmentDetection = None
                    return
            Holder.__name__ = "TreatmentSurveillanceCapability_Holder"
            self.pyclass = Holder

    class TreatmentSystemOutput_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "TreatmentSystemOutput")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.TreatmentSystemOutput_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Location",lazy=True)(pname=(ns,"location"), aname="_location", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"outputPerDay"), aname="_outputPerDay", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","UnitOfMeasureEnum",lazy=True)(pname=(ns,"outputUnits"), aname="_outputUnits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._location = None
                    self._outputPerDay = []
                    self._outputUnits = None
                    return
            Holder.__name__ = "TreatmentSystemOutput_Holder"
            self.pyclass = Holder

    class LogisticalSystem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "LogisticalSystem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.LogisticalSystem_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"product"), aname="_product", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","LogisticalSystemNode",lazy=True)(pname=(ns,"logisticalSystemNodes"), aname="_logisticalSystemNodes", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._product = None
                    self._logisticalSystemNodes = []
                    return
            Holder.__name__ = "LogisticalSystem_Holder"
            self.pyclass = Holder

    class LogisticalSystemNode_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "LogisticalSystemNode")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.LogisticalSystemNode_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Schedule",lazy=True)(pname=(ns,"capacitySchedule"), aname="_capacitySchedule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Schedule",lazy=True)(pname=(ns,"outputSchedule"), aname="_outputSchedule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","LogisticalSystemNode",lazy=True)(pname=(ns,"children"), aname="_children", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._capacitySchedule = None
                    self._outputSchedule = None
                    self._children = []
                    return
            Holder.__name__ = "LogisticalSystemNode_Holder"
            self.pyclass = Holder

    class Rate_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "Rate")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.Rate_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","UnitOfMeasureEnum",lazy=True)(pname=(ns,"numeratorUnitOfMeasure"), aname="_numeratorUnitOfMeasure", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","UnitOfMeasureEnum",lazy=True)(pname=(ns,"denominatorUnitOfMeasure"), aname="_denominatorUnitOfMeasure", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ProbabilityDistribution",lazy=True)(pname=(ns,"probabilityDistribution"), aname="_probabilityDistribution", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._numeratorUnitOfMeasure = None
                    self._denominatorUnitOfMeasure = None
                    self._value = None
                    self._probabilityDistribution = None
                    return
            Holder.__name__ = "Rate_Holder"
            self.pyclass = Holder

    class NonApolloParameter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "NonApolloParameter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.NonApolloParameter_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"parameterName"), aname="_parameterName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"parameterValue"), aname="_parameterValue", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._parameterName = None
                    self._parameterValue = None
                    return
            Holder.__name__ = "NonApolloParameter_Holder"
            self.pyclass = Holder

    class WithinGroupTransmissionProbability_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "WithinGroupTransmissionProbability")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.WithinGroupTransmissionProbability_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"groupType"), aname="_groupType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Probability",lazy=True)(pname=(ns,"probability"), aname="_probability", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._groupType = None
                    self._probability = None
                    return
            Holder.__name__ = "WithinGroupTransmissionProbability_Holder"
            self.pyclass = Holder

    class OperatorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "OperatorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class LifeCycle_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "LifeCycle")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.LifeCycle_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","LifeStageWithDurationAndMortality",lazy=True)(pname=(ns,"lifeStagesWithDurationsAndMortalities"), aname="_lifeStagesWithDurationsAndMortalities", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._lifeStagesWithDurationsAndMortalities = []
                    return
            Holder.__name__ = "LifeCycle_Holder"
            self.pyclass = Holder

    class AaaDummyType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "AaaDummyType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.AaaDummyType_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","TreatmentEfficacy",lazy=True)(pname=(ns,"elementIWantToScreenSnapWithoutArrows"), aname="_elementIWantToScreenSnapWithoutArrows", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._elementIWantToScreenSnapWithoutArrows = None
                    return
            Holder.__name__ = "AaaDummyType_Holder"
            self.pyclass = Holder

    class Behavior_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "Behavior")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.Behavior_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "Behavior_Holder"
            self.pyclass = Holder

    class MosquitoBehavior_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "MosquitoBehavior")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.MosquitoBehavior_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","ProbabilisticParameter",lazy=True)(pname=(ns,"biteProbability"), aname="_biteProbability", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Distance",lazy=True)(pname=(ns,"biteRadius"), aname="_biteRadius", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Duration",lazy=True)(pname=(ns,"timeBetweenBites"), aname="_timeBetweenBites", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Rate",lazy=True)(pname=(ns,"migrationSpeed"), aname="_migrationSpeed", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Fraction",lazy=True)(pname=(ns,"shadeAffinity"), aname="_shadeAffinity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Distance",lazy=True)(pname=(ns,"maleMatingRadius"), aname="_maleMatingRadius", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Probability",lazy=True)(pname=(ns,"matingProbability"), aname="_matingProbability", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Distance",lazy=True)(pname=(ns,"straightTravelAfterOviposit"), aname="_straightTravelAfterOviposit", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.Behavior_Def not in ns2.MosquitoBehavior_Def.__bases__:
                bases = list(ns2.MosquitoBehavior_Def.__bases__)
                bases.insert(0, ns2.Behavior_Def)
                ns2.MosquitoBehavior_Def.__bases__ = tuple(bases)

            ns2.Behavior_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class HumanBehavior_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "HumanBehavior")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.HumanBehavior_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","Rate",lazy=True)(pname=(ns,"speedOfMovement"), aname="_speedOfMovement", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Fraction",lazy=True)(pname=(ns,"buildingAffinity"), aname="_buildingAffinity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.Behavior_Def not in ns2.HumanBehavior_Def.__bases__:
                bases = list(ns2.HumanBehavior_Def.__bases__)
                bases.insert(0, ns2.Behavior_Def)
                ns2.HumanBehavior_Def.__bases__ = tuple(bases)

            ns2.Behavior_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Distance_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "Distance")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.Distance_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","UnitOfDistanceEnum",lazy=True)(pname=(ns,"unitOfDistance"), aname="_unitOfDistance", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"value"), aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.ParameterValue_Def not in ns2.Distance_Def.__bases__:
                bases = list(ns2.Distance_Def.__bases__)
                bases.insert(0, ns2.ParameterValue_Def)
                ns2.Distance_Def.__bases__ = tuple(bases)

            ns2.ParameterValue_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ParameterValue_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ParameterValue")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.ParameterValue_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ParameterValue_Holder"
            self.pyclass = Holder

    class TransmissionProbability_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "TransmissionProbability")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.TransmissionProbability_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","ContactDefinitionEnum",lazy=True)(pname=(ns,"contactDefinition"), aname="_contactDefinition", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"contactDefinitionText"), aname="_contactDefinitionText", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Probability",lazy=True)(pname=(ns,"probability"), aname="_probability", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._contactDefinition = None
                    self._contactDefinitionText = None
                    self._probability = None
                    return
            Holder.__name__ = "TransmissionProbability_Holder"
            self.pyclass = Holder

    class ContactDefinitionEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ContactDefinitionEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Reproduction_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "Reproduction")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.Reproduction_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "Reproduction_Holder"
            self.pyclass = Holder

    class MosquitoReproduction_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "MosquitoReproduction")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.MosquitoReproduction_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","Duration",lazy=True)(pname=(ns,"gonotrophicPeriodDuration"), aname="_gonotrophicPeriodDuration", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"eggsPerBrood"), aname="_eggsPerBrood", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"minimumEggsPerOviposition"), aname="_minimumEggsPerOviposition", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Rate",lazy=True)(pname=(ns,"ageDependentFecundityReduction"), aname="_ageDependentFecundityReduction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.Reproduction_Def not in ns2.MosquitoReproduction_Def.__bases__:
                bases = list(ns2.MosquitoReproduction_Def.__bases__)
                bases.insert(0, ns2.Reproduction_Def)
                ns2.MosquitoReproduction_Def.__bases__ = tuple(bases)

            ns2.Reproduction_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LifeStageWithDurationAndMortality_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "LifeStageWithDurationAndMortality")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.LifeStageWithDurationAndMortality_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","DevelopmentalStageEnum",lazy=True)(pname=(ns,"stage"), aname="_stage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Duration",lazy=True)(pname=(ns,"duration"), aname="_duration", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Rate",lazy=True)(pname=(ns,"mortalityRate"), aname="_mortalityRate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","MortalityFunction",lazy=True)(pname=(ns,"mortalityFunction"), aname="_mortalityFunction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._stage = None
                    self._duration = None
                    self._mortalityRate = None
                    self._mortalityFunction = None
                    return
            Holder.__name__ = "LifeStageWithDurationAndMortality_Holder"
            self.pyclass = Holder

    class MortalityFunction_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "MortalityFunction")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.MortalityFunction_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "MortalityFunction_Holder"
            self.pyclass = Holder

    class ClaraDensityDependentMortalityFunction_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ClaraDensityDependentMortalityFunction")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.ClaraDensityDependentMortalityFunction_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","NonNegativeDouble",lazy=True)(pname=(ns,"omega"), aname="_omega", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","NonNegativeDouble",lazy=True)(pname=(ns,"sigma"), aname="_sigma", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.MortalityFunction_Def not in ns2.ClaraDensityDependentMortalityFunction_Def.__bases__:
                bases = list(ns2.ClaraDensityDependentMortalityFunction_Def.__bases__)
                bases.insert(0, ns2.MortalityFunction_Def)
                ns2.ClaraDensityDependentMortalityFunction_Def.__bases__ = tuple(bases)

            ns2.MortalityFunction_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DevelopmentalStageEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "DevelopmentalStageEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CartesianCircleLocationDefinition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "CartesianCircleLocationDefinition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.CartesianCircleLocationDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","Distance",lazy=True)(pname=(ns,"eastWestOffsetFromCartesianCenter"), aname="_eastWestOffsetFromCartesianCenter", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Distance",lazy=True)(pname=(ns,"northSouthOffsetFromCartesianCenter"), aname="_northSouthOffsetFromCartesianCenter", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Distance",lazy=True)(pname=(ns,"altitudeRelativeToCartesianCenter"), aname="_altitudeRelativeToCartesianCenter", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Distance",lazy=True)(pname=(ns,"radius"), aname="_radius", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._eastWestOffsetFromCartesianCenter = None
                    self._northSouthOffsetFromCartesianCenter = None
                    self._altitudeRelativeToCartesianCenter = None
                    self._radius = None
                    return
            Holder.__name__ = "CartesianCircleLocationDefinition_Holder"
            self.pyclass = Holder

    class ScenarioCartesianOrigin_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ScenarioCartesianOrigin")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.ScenarioCartesianOrigin_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","Longitude",lazy=True)(pname=(ns,"cartesianReferenceLongitude"), aname="_cartesianReferenceLongitude", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Latitude",lazy=True)(pname=(ns,"cartesianReferenceLatitude"), aname="_cartesianReferenceLatitude", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Distance",lazy=True)(pname=(ns,"cartesianReferenceAltitude"), aname="_cartesianReferenceAltitude", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._cartesianReferenceLongitude = None
                    self._cartesianReferenceLatitude = None
                    self._cartesianReferenceAltitude = None
                    return
            Holder.__name__ = "ScenarioCartesianOrigin_Holder"
            self.pyclass = Holder

    class OvipositionSiteCensus_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "OvipositionSiteCensus")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.OvipositionSiteCensus_Def.schema
            TClist = [ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"breteauIndex"), aname="_breteauIndex", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","NonNegativeDouble",lazy=True)(pname=(ns,"carryingCapacityPerHouse"), aname="_carryingCapacityPerHouse", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"heterogenousCarryingCapacity"), aname="_heterogenousCarryingCapacity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","NonNegativeDouble",lazy=True)(pname=(ns,"ratioOfOutdoorToIndoorOvisites"), aname="_ratioOfOutdoorToIndoorOvisites", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","NonNegativeDouble",lazy=True)(pname=(ns,"maximumRatioOfOutdoorCarryingCapacityToIndoor"), aname="_maximumRatioOfOutdoorCarryingCapacityToIndoor", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.AbioticThingCensus_Def not in ns2.OvipositionSiteCensus_Def.__bases__:
                bases = list(ns2.OvipositionSiteCensus_Def.__bases__)
                bases.insert(0, ns2.AbioticThingCensus_Def)
                ns2.OvipositionSiteCensus_Def.__bases__ = tuple(bases)

            ns2.AbioticThingCensus_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CaseDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "CaseDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.CaseDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","CaseDefinitionEnum",lazy=True)(pname=(ns,"apolloLabel"), aname="_apolloLabel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"investigationLabel"), aname="_investigationLabel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"investigationDefinition"), aname="_investigationDefinition", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"referenceId"), aname="_referenceId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.CategoryDefinition_Def not in ns2.CaseDefinition_Def.__bases__:
                bases = list(ns2.CaseDefinition_Def.__bases__)
                bases.insert(0, ns2.CategoryDefinition_Def)
                ns2.CaseDefinition_Def.__bases__ = tuple(bases)

            ns2.CategoryDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CaseList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "CaseList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.CaseList_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","NcbiTaxonId",lazy=True)(pname=(ns,"speciesOfCases"), aname="_speciesOfCases", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","CaseRecord",lazy=True)(pname=(ns,"caseRecords"), aname="_caseRecords", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._speciesOfCases = None
                    self._caseRecords = []
                    return
            Holder.__name__ = "CaseList_Holder"
            self.pyclass = Holder

    class CaseRecord_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "CaseRecord")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.CaseRecord_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"caseId"), aname="_caseId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"ageInYears"), aname="_ageInYears", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","OccupationEnum",lazy=True)(pname=(ns,"occupations"), aname="_occupations", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","PlaceVisited",lazy=True)(pname=(ns,"placesVisitedWhileSusceptibleOrInfectious"), aname="_placesVisitedWhileSusceptibleOrInfectious", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"infectionAcquiredFromCaseId"), aname="_infectionAcquiredFromCaseId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","DiseaseOutcomeWithLocationDateTime",lazy=True)(pname=(ns,"diseaseOutcomesWithLocationDateTime"), aname="_diseaseOutcomesWithLocationDateTime", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","LabTestAndResult",lazy=True)(pname=(ns,"labTestsAndResults"), aname="_labTestsAndResults", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"pathogenGeneSequence"), aname="_pathogenGeneSequence", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._caseId = None
                    self._ageInYears = None
                    self._occupations = []
                    self._placesVisitedWhileSusceptibleOrInfectious = []
                    self._infectionAcquiredFromCaseId = None
                    self._diseaseOutcomesWithLocationDateTime = []
                    self._labTestsAndResults = []
                    self._pathogenGeneSequence = None
                    return
            Holder.__name__ = "CaseRecord_Holder"
            self.pyclass = Holder

    class CaseDefinitionEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "CaseDefinitionEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CaseCount_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "CaseCount")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.CaseCount_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"countTitle"), aname="_countTitle", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","CaseDefinitionEnum",lazy=True)(pname=(ns,"caseDefinitionsIncluded"), aname="_caseDefinitionsIncluded", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"totalCount"), aname="_totalCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","CaseCountArray",lazy=True)(pname=(ns,"caseCountArray"), aname="_caseCountArray", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"referenceId"), aname="_referenceId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._countTitle = None
                    self._caseDefinitionsIncluded = []
                    self._totalCount = None
                    self._caseCountArray = None
                    self._referenceId = None
                    return
            Holder.__name__ = "CaseCount_Holder"
            self.pyclass = Holder

    class CaseCountArray_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "CaseCountArray")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.CaseCountArray_Def.schema
            TClist = [ZSI.TCnumbers.IpositiveInteger(pname=(ns,"nDimensions"), aname="_nDimensions", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ArrayAxis",lazy=True)(pname=(ns,"firstArrayAxis"), aname="_firstArrayAxis", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._nDimensions = None
                    self._firstArrayAxis = None
                    return
            Holder.__name__ = "CaseCountArray_Holder"
            self.pyclass = Holder

    class CaseRecordCategoricalVariables_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "CaseRecordCategoricalVariables")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.CaseRecordCategoricalVariables_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"someWayToIdentifyOutbreak"), aname="_someWayToIdentifyOutbreak", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","CaseRecordCategoricalVariable",lazy=True)(pname=(ns,"categoricalVariablesAndCategories"), aname="_categoricalVariablesAndCategories", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._someWayToIdentifyOutbreak = None
                    self._categoricalVariablesAndCategories = []
                    return
            Holder.__name__ = "CaseRecordCategoricalVariables_Holder"
            self.pyclass = Holder

    class CaseRecordCategoricalVariable_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "CaseRecordCategoricalVariable")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.CaseRecordCategoricalVariable_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","ConditioningVariableEnum",lazy=True)(pname=(ns,"categoricalVariable"), aname="_categoricalVariable", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","CategoryDefinition",lazy=True)(pname=(ns,"categories"), aname="_categories", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._categoricalVariable = None
                    self._categories = []
                    return
            Holder.__name__ = "CaseRecordCategoricalVariable_Holder"
            self.pyclass = Holder

    class EpidemicPeriod_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "EpidemicPeriod")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.EpidemicPeriod_Def.schema
            TClist = [ZSI.TCtimes.gDate(pname=(ns,"startDate"), aname="_startDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","EpidemicPeriodBoundaryDefinitionEnum",lazy=True)(pname=(ns,"startDateDefinition"), aname="_startDateDefinition", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"endDate"), aname="_endDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","EpidemicPeriodBoundaryDefinitionEnum",lazy=True)(pname=(ns,"endDateDefinition"), aname="_endDateDefinition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._startDate = None
                    self._startDateDefinition = None
                    self._endDate = None
                    self._endDateDefinition = None
                    return
            Holder.__name__ = "EpidemicPeriod_Holder"
            self.pyclass = Holder

    class ContactDefinition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ContactDefinition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.ContactDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","ContactDefinitionEnum",lazy=True)(pname=(ns,"apolloLabel"), aname="_apolloLabel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"investigationLabel"), aname="_investigationLabel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"investigationDefinition"), aname="_investigationDefinition", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"referenceId"), aname="_referenceId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._apolloLabel = None
                    self._investigationLabel = None
                    self._investigationDefinition = None
                    self._referenceId = None
                    return
            Holder.__name__ = "ContactDefinition_Holder"
            self.pyclass = Holder

    class TransmissionTree_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "TransmissionTree")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.TransmissionTree_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","CaseRecord",lazy=True)(pname=(ns,"thisCase"), aname="_thisCase", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","TransmissionTree",lazy=True)(pname=(ns,"casesThisCaseInfected"), aname="_casesThisCaseInfected", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._thisCase = None
                    self._casesThisCaseInfected = []
                    return
            Holder.__name__ = "TransmissionTree_Holder"
            self.pyclass = Holder

    class RelativeRiskDataSet_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "RelativeRiskDataSet")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.RelativeRiskDataSet_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"textualDescription"), aname="_textualDescription", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","CaseCountArray",lazy=True)(pname=(ns,"caseCountArray"), aname="_caseCountArray", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","CaseCountArray",lazy=True)(pname=(ns,"controlCountArray"), aname="_controlCountArray", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Reference",lazy=True)(pname=(ns,"referenceId"), aname="_referenceId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._textualDescription = None
                    self._caseCountArray = None
                    self._controlCountArray = None
                    self._referenceId = None
                    return
            Holder.__name__ = "RelativeRiskDataSet_Holder"
            self.pyclass = Holder

    class CaseVariableAndValue_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "CaseVariableAndValue")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.CaseVariableAndValue_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"variable"), aname="_variable", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","CategoryDefinition",lazy=True)(pname=(ns,"categoryDefinition"), aname="_categoryDefinition", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"value"), aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._variable = None
                    self._categoryDefinition = None
                    self._value = None
                    return
            Holder.__name__ = "CaseVariableAndValue_Holder"
            self.pyclass = Holder

    class PopulationInfectionSurvey_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "PopulationInfectionSurvey")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.PopulationInfectionSurvey_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"speciesSampled"), aname="_speciesSampled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","NcbiTaxonId",lazy=True)(pname=(ns,"speciesSampledNcbiTaxonId"), aname="_speciesSampledNcbiTaxonId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"numberSampled"), aname="_numberSampled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"whereSampled"), aname="_whereSampled", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"testName"), aname="_testName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","LoincId",lazy=True)(pname=(ns,"testLoincId"), aname="_testLoincId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"numberOfSamplesPositive"), aname="_numberOfSamplesPositive", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"referenceId"), aname="_referenceId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._speciesSampled = None
                    self._speciesSampledNcbiTaxonId = None
                    self._numberSampled = None
                    self._whereSampled = None
                    self._testName = None
                    self._testLoincId = None
                    self._numberOfSamplesPositive = None
                    self._referenceId = None
                    return
            Holder.__name__ = "PopulationInfectionSurvey_Holder"
            self.pyclass = Holder

    class PopulationSerologySurvey_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "PopulationSerologySurvey")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.PopulationSerologySurvey_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"speciesSampled"), aname="_speciesSampled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","NcbiTaxonId",lazy=True)(pname=(ns,"speciesSampledNcbiTaxonId"), aname="_speciesSampledNcbiTaxonId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"numberSampled"), aname="_numberSampled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"whereSampled"), aname="_whereSampled", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"testName"), aname="_testName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","LoincId",lazy=True)(pname=(ns,"testLoincId"), aname="_testLoincId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"numberOfSamplesPositive"), aname="_numberOfSamplesPositive", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"referenceId"), aname="_referenceId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._speciesSampled = None
                    self._speciesSampledNcbiTaxonId = None
                    self._numberSampled = None
                    self._whereSampled = None
                    self._testName = None
                    self._testLoincId = None
                    self._numberOfSamplesPositive = None
                    self._referenceId = None
                    return
            Holder.__name__ = "PopulationSerologySurvey_Holder"
            self.pyclass = Holder

    class Reference_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "Reference")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.Reference_Def.schema
            TClist = [ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"id"), aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"title"), aname="_title", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"authors"), aname="_authors", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"publication"), aname="_publication", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"url"), aname="_url", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"pubMedId"), aname="_pubMedId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"orcId"), aname="_orcId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"obcIdeId"), aname="_obcIdeId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._title = None
                    self._authors = None
                    self._publication = None
                    self._url = None
                    self._pubMedId = None
                    self._orcId = None
                    self._obcIdeId = None
                    return
            Holder.__name__ = "Reference_Holder"
            self.pyclass = Holder

    class EpidemicPeriodBoundaryDefinitionEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "EpidemicPeriodBoundaryDefinitionEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CountType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "CountType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.CountType_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "CountType_Holder"
            self.pyclass = Holder

    class IntegerCount_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "IntegerCount")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.IntegerCount_Def.schema
            TClist = [ZSI.TCnumbers.Iinteger(pname=(ns,"integer"), aname="_integer", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.CountType_Def not in ns2.IntegerCount_Def.__bases__:
                bases = list(ns2.IntegerCount_Def.__bases__)
                bases.insert(0, ns2.CountType_Def)
                ns2.IntegerCount_Def.__bases__ = tuple(bases)

            ns2.CountType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DoubleCount_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "DoubleCount")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.DoubleCount_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","NonNegativeDouble",lazy=True)(pname=(ns,"double"), aname="_double", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.CountType_Def not in ns2.DoubleCount_Def.__bases__:
                bases = list(ns2.DoubleCount_Def.__bases__)
                bases.insert(0, ns2.CountType_Def)
                ns2.DoubleCount_Def.__bases__ = tuple(bases)

            ns2.CountType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ReproductionNumber_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ReproductionNumber")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.ReproductionNumber_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","NonNegativeDouble",lazy=True)(pname=(ns,"exactValue"), aname="_exactValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ProbabilityDistribution",lazy=True)(pname=(ns,"uncertainValue"), aname="_uncertainValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"referenceId"), aname="_referenceId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._exactValue = None
                    self._uncertainValue = None
                    self._referenceId = None
                    return
            Holder.__name__ = "ReproductionNumber_Holder"
            self.pyclass = Holder

    class Interval_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "Interval")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.Interval_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","IntervalBoundaryDefinitionEnum",lazy=True)(pname=(ns,"startBoundaryDefinition"), aname="_startBoundaryDefinition", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","IntervalBoundaryDefinitionEnum",lazy=True)(pname=(ns,"endBoundaryDefinition"), aname="_endBoundaryDefinition", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Duration",lazy=True)(pname=(ns,"duration"), aname="_duration", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"readableTitle"), aname="_readableTitle", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"referenceId"), aname="_referenceId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._startBoundaryDefinition = None
                    self._endBoundaryDefinition = None
                    self._duration = None
                    self._readableTitle = None
                    self._referenceId = None
                    return
            Holder.__name__ = "Interval_Holder"
            self.pyclass = Holder

    class IntervalBoundaryDefinitionEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "IntervalBoundaryDefinitionEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class LocationPolygon_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "LocationPolygon")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.LocationPolygon_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"linearRing"), aname="_linearRing", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._linearRing = None
                    return
            Holder.__name__ = "LocationPolygon_Holder"
            self.pyclass = Holder

    class LoincId_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "LoincId")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DiseaseOutcomeWithLocationDateTime_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "DiseaseOutcomeWithLocationDateTime")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.DiseaseOutcomeWithLocationDateTime_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","DiseaseOutcomeEnum",lazy=True)(pname=(ns,"diseaseOutcome"), aname="_diseaseOutcome", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"dateTime"), aname="_dateTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","PlaceEnum",lazy=True)(pname=(ns,"place"), aname="_place", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","NamedMultiGeometry",lazy=True)(pname=(ns,"namedPolygon"), aname="_namedPolygon", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._diseaseOutcome = None
                    self._dateTime = None
                    self._place = None
                    self._namedPolygon = None
                    return
            Holder.__name__ = "DiseaseOutcomeWithLocationDateTime_Holder"
            self.pyclass = Holder

    class LabTestAndResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "LabTestAndResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.LabTestAndResult_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"textualName"), aname="_textualName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","LoincId",lazy=True)(pname=(ns,"loincCode"), aname="_loincCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"sampleDate"), aname="_sampleDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"result"), aname="_result", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._textualName = None
                    self._loincCode = None
                    self._sampleDate = None
                    self._result = None
                    return
            Holder.__name__ = "LabTestAndResult_Holder"
            self.pyclass = Holder

    class OccupationEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "OccupationEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PlaceVisited_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "PlaceVisited")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.PlaceVisited_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","PlaceEnum",lazy=True)(pname=(ns,"place"), aname="_place", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","NamedMultiGeometry",lazy=True)(pname=(ns,"namedMultiGeometry"), aname="_namedMultiGeometry", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Rate",lazy=True)(pname=(ns,"frequencyOfVisits"), aname="_frequencyOfVisits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"datesOfVisits"), aname="_datesOfVisits", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","RealDateSpanCategoryDefinition",lazy=True)(pname=(ns,"realDateSpansOfVisits"), aname="_realDateSpansOfVisits", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","RealTimeSpanCategoryDefinition",lazy=True)(pname=(ns,"realTimeSpansOfVisits"), aname="_realTimeSpansOfVisits", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._place = None
                    self._namedMultiGeometry = None
                    self._frequencyOfVisits = None
                    self._datesOfVisits = []
                    self._realDateSpansOfVisits = []
                    self._realTimeSpansOfVisits = []
                    return
            Holder.__name__ = "PlaceVisited_Holder"
            self.pyclass = Holder

    class MultiGeometry_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "MultiGeometry")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.MultiGeometry_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","LocationPolygon",lazy=True)(pname=(ns,"polygons"), aname="_polygons", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._polygons = []
                    return
            Holder.__name__ = "MultiGeometry_Holder"
            self.pyclass = Holder

    class NamedMultiGeometry_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "NamedMultiGeometry")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.NamedMultiGeometry_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","LocationPolygon",lazy=True)(pname=(ns,"polygons"), aname="_polygons", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ApolloLocationCode",lazy=True)(pname=(ns,"apolloLocationCode"), aname="_apolloLocationCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"textualDescription"), aname="_textualDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._polygons = []
                    self._apolloLocationCode = None
                    self._textualDescription = None
                    return
            Holder.__name__ = "NamedMultiGeometry_Holder"
            self.pyclass = Holder

    class DischargePathAndProbability_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "DischargePathAndProbability")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.DischargePathAndProbability_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","DischargePathEnum",lazy=True)(pname=(ns,"dischargePath"), aname="_dischargePath", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Duration",lazy=True)(pname=(ns,"readmissionDelayIndays"), aname="_readmissionDelayIndays", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Probability",lazy=True)(pname=(ns,"probability"), aname="_probability", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._dischargePath = None
                    self._readmissionDelayIndays = None
                    self._probability = None
                    return
            Holder.__name__ = "DischargePathAndProbability_Holder"
            self.pyclass = Holder

    class Unit_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "Unit")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.Unit_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"unitId"), aname="_unitId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","UnitEnum",lazy=True)(pname=(ns,"unitType"), aname="_unitType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"numberOfBeds"), aname="_numberOfBeds", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Duration",lazy=True)(pname=(ns,"averageLengthOfStay"), aname="_averageLengthOfStay", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._unitId = None
                    self._unitType = None
                    self._numberOfBeds = None
                    self._averageLengthOfStay = None
                    return
            Holder.__name__ = "Unit_Holder"
            self.pyclass = Holder

    class DischargePathEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "DischargePathEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class FacilityTypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "FacilityTypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class IndividualDecolonizationEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "IndividualDecolonizationEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class UnitEnum_Def(ZSI.TC.Token, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "UnitEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.Token.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Population_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "Population")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.Population_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","ApolloLocationCode",lazy=True)(pname=(ns,"location"), aname="_location", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","NcbiTaxonId",lazy=True)(pname=(ns,"taxonId"), aname="_taxonId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"count"), aname="_count", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","PopulationInfectionAndImmunityCensus",lazy=True)(pname=(ns,"infectionAndImmunityCensuses"), aname="_infectionAndImmunityCensuses", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","PopulationColonizationCensus",lazy=True)(pname=(ns,"colonizationCensuses"), aname="_colonizationCensuses", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","IndividualsAndHouseholds",lazy=True)(pname=(ns,"individualsAndHouseholds"), aname="_individualsAndHouseholds", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","PointerToData",lazy=True)(pname=(ns,"pointerToIndividualsAndHouseholds"), aname="_pointerToIndividualsAndHouseholds", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","IndividualBiologyAndBehavior",lazy=True)(pname=(ns,"individualBiologyAndBehavior"), aname="_individualBiologyAndBehavior", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._location = None
                    self._taxonId = None
                    self._count = None
                    self._infectionAndImmunityCensuses = []
                    self._colonizationCensuses = []
                    self._individualsAndHouseholds = None
                    self._pointerToIndividualsAndHouseholds = None
                    self._individualBiologyAndBehavior = None
                    return
            Holder.__name__ = "Population_Holder"
            self.pyclass = Holder

    class IndividualBiologyAndBehavior_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "IndividualBiologyAndBehavior")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.IndividualBiologyAndBehavior_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","LifeCycle",lazy=True)(pname=(ns,"lifeCycle"), aname="_lifeCycle", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Reproduction",lazy=True)(pname=(ns,"reproduction"), aname="_reproduction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Behavior",lazy=True)(pname=(ns,"behavior"), aname="_behavior", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._lifeCycle = None
                    self._reproduction = None
                    self._behavior = None
                    return
            Holder.__name__ = "IndividualBiologyAndBehavior_Holder"
            self.pyclass = Holder

    class FacilityId_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "FacilityId")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PopulationColonizationCensus_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "PopulationColonizationCensus")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.PopulationColonizationCensus_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "PopulationColonizationCensus_Holder"
            self.pyclass = Holder

    class Characteristic_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "Characteristic")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.Characteristic_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","CharacteristicEnum",lazy=True)(pname=(ns,"enumeratedName"), aname="_enumeratedName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userInventedName"), aname="_userInventedName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","CategoryDefinition",lazy=True)(pname=(ns,"value"), aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._enumeratedName = None
                    self._userInventedName = None
                    self._value = None
                    return
            Holder.__name__ = "Characteristic_Holder"
            self.pyclass = Holder

    class CharacteristicEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "CharacteristicEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MaritalStatusCategoryDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "MaritalStatusCategoryDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.MaritalStatusCategoryDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","MaritalStatusEnum",lazy=True)(pname=(ns,"maritalStatus"), aname="_maritalStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.CategoryDefinition_Def not in ns2.MaritalStatusCategoryDefinition_Def.__bases__:
                bases = list(ns2.MaritalStatusCategoryDefinition_Def.__bases__)
                bases.insert(0, ns2.CategoryDefinition_Def)
                ns2.MaritalStatusCategoryDefinition_Def.__bases__ = tuple(bases)

            ns2.CategoryDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MaritalStatusEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "MaritalStatusEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SchoolingStatusCategoryDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "SchoolingStatusCategoryDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.SchoolingStatusCategoryDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","SchoolingStatusEnum",lazy=True)(pname=(ns,"schoolingStatus"), aname="_schoolingStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.CategoryDefinition_Def not in ns2.SchoolingStatusCategoryDefinition_Def.__bases__:
                bases = list(ns2.SchoolingStatusCategoryDefinition_Def.__bases__)
                bases.insert(0, ns2.CategoryDefinition_Def)
                ns2.SchoolingStatusCategoryDefinition_Def.__bases__ = tuple(bases)

            ns2.CategoryDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SchoolingStatusEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "SchoolingStatusEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DisabilityStatusCategoryDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "DisabilityStatusCategoryDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.DisabilityStatusCategoryDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","DisabilityStatusEnum",lazy=True)(pname=(ns,"disabilityStatus"), aname="_disabilityStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.CategoryDefinition_Def not in ns2.DisabilityStatusCategoryDefinition_Def.__bases__:
                bases = list(ns2.DisabilityStatusCategoryDefinition_Def.__bases__)
                bases.insert(0, ns2.CategoryDefinition_Def)
                ns2.DisabilityStatusCategoryDefinition_Def.__bases__ = tuple(bases)

            ns2.CategoryDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DisabilityStatusEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "DisabilityStatusEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class EmploymentStatusCategoryDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "EmploymentStatusCategoryDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.EmploymentStatusCategoryDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","EmploymentStatusEnum",lazy=True)(pname=(ns,"employmentStatus"), aname="_employmentStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.CategoryDefinition_Def not in ns2.EmploymentStatusCategoryDefinition_Def.__bases__:
                bases = list(ns2.EmploymentStatusCategoryDefinition_Def.__bases__)
                bases.insert(0, ns2.CategoryDefinition_Def)
                ns2.EmploymentStatusCategoryDefinition_Def.__bases__ = tuple(bases)

            ns2.CategoryDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class EmploymentStatusEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "EmploymentStatusEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DataTypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "DataTypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Schedule_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "Schedule")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.Schedule_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","UnitOfMeasureEnum",lazy=True)(pname=(ns,"unitOfMeasure"), aname="_unitOfMeasure", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ScheduleElement",lazy=True)(pname=(ns,"scheduleElements"), aname="_scheduleElements", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._unitOfMeasure = None
                    self._scheduleElements = []
                    return
            Holder.__name__ = "Schedule_Holder"
            self.pyclass = Holder

    class ScheduleElement_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "ScheduleElement")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.ScheduleElement_Def.schema
            TClist = [ZSI.TCnumbers.IpositiveInteger(pname=(ns,"quantity"), aname="_quantity", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"dateTime"), aname="_dateTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._quantity = None
                    self._dateTime = None
                    return
            Holder.__name__ = "ScheduleElement_Holder"
            self.pyclass = Holder

    class IndividualsAndHouseholds_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "IndividualsAndHouseholds")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.IndividualsAndHouseholds_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","Individual",lazy=True)(pname=(ns,"individuals"), aname="_individuals", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","Household",lazy=True)(pname=(ns,"households"), aname="_households", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._individuals = []
                    self._households = []
                    return
            Holder.__name__ = "IndividualsAndHouseholds_Holder"
            self.pyclass = Holder

# end class ns2 (tns: http://types.apollo.pitt.edu/v3_0_2/)

##############################
# targetNamespace
# http://simulator-service-types.apollo.pitt.edu/v3_0_2/
##############################

class ns3:
    targetNamespace = "http://simulator-service-types.apollo.pitt.edu/v3_0_2/"

    class RunSimulationResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://simulator-service-types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "RunSimulationResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.RunSimulationResult_Def.schema
            TClist = [GTD("http://services-common.apollo.pitt.edu/v3_0_2/","RunIdentification",lazy=True)(pname=(ns,"runId"), aname="_runId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._runId = None
                    return
            Holder.__name__ = "RunSimulationResult_Holder"
            self.pyclass = Holder

    class GetScenarioLocationCodesSupportedBySimulatorResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://simulator-service-types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "GetScenarioLocationCodesSupportedBySimulatorResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.GetScenarioLocationCodesSupportedBySimulatorResult_Def.schema
            TClist = [GTD("http://services-common.apollo.pitt.edu/v3_0_2/","MethodCallStatus",lazy=True)(pname=(ns,"methodCallStatus"), aname="_methodCallStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","ApolloLocationCode",lazy=True)(pname=(ns,"locationCodes"), aname="_locationCodes", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._methodCallStatus = None
                    self._locationCodes = []
                    return
            Holder.__name__ = "GetScenarioLocationCodesSupportedBySimulatorResult_Holder"
            self.pyclass = Holder

    class GetPopulationAndEnvironmentCensusResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://simulator-service-types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "GetPopulationAndEnvironmentCensusResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.GetPopulationAndEnvironmentCensusResult_Def.schema
            TClist = [GTD("http://services-common.apollo.pitt.edu/v3_0_2/","MethodCallStatus",lazy=True)(pname=(ns,"methodCallStatus"), aname="_methodCallStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","PopulationAndEnvironmentCensus",lazy=True)(pname=(ns,"populationAndEnvironmentCensus"), aname="_populationAndEnvironmentCensus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._methodCallStatus = None
                    self._populationAndEnvironmentCensus = None
                    return
            Holder.__name__ = "GetPopulationAndEnvironmentCensusResult_Holder"
            self.pyclass = Holder

    class GetConfigurationFileForSimulationResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://simulator-service-types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "GetConfigurationFileForSimulationResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.GetConfigurationFileForSimulationResult_Def.schema
            TClist = [GTD("http://services-common.apollo.pitt.edu/v3_0_2/","MethodCallStatus",lazy=True)(pname=(ns,"methodCallStatus"), aname="_methodCallStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"configurationFile"), aname="_configurationFile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"configurationFileInHtmlFormat"), aname="_configurationFileInHtmlFormat", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._methodCallStatus = None
                    self._configurationFile = None
                    self._configurationFileInHtmlFormat = None
                    return
            Holder.__name__ = "GetConfigurationFileForSimulationResult_Holder"
            self.pyclass = Holder

    class RunSimulationMessage_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://simulator-service-types.apollo.pitt.edu/v3_0_2/"
        type = (schema, "RunSimulationMessage")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.RunSimulationMessage_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_2/","SimulatorTimeSpecification",lazy=True)(pname=(ns,"simulatorTimeSpecification"), aname="_simulatorTimeSpecification", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_2/","InfectiousDiseaseScenario",lazy=True)(pname=(ns,"infectiousDiseaseScenario"), aname="_infectiousDiseaseScenario", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.RunMessage_Def not in ns3.RunSimulationMessage_Def.__bases__:
                bases = list(ns3.RunSimulationMessage_Def.__bases__)
                bases.insert(0, ns1.RunMessage_Def)
                ns3.RunSimulationMessage_Def.__bases__ = tuple(bases)

            ns1.RunMessage_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RunSimulationMessageElement_Dec(ElementDeclaration):
        literal = "RunSimulationMessageElement"
        schema = "http://simulator-service-types.apollo.pitt.edu/v3_0_2/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://simulator-service-types.apollo.pitt.edu/v3_0_2/","RunSimulationMessageElement")
            kw["aname"] = "_RunSimulationMessageElement"
            if ns3.RunSimulationMessage_Def not in ns3.RunSimulationMessageElement_Dec.__bases__:
                bases = list(ns3.RunSimulationMessageElement_Dec.__bases__)
                bases.insert(0, ns3.RunSimulationMessage_Def)
                ns3.RunSimulationMessageElement_Dec.__bases__ = tuple(bases)

            ns3.RunSimulationMessage_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "RunSimulationMessageElement_Dec_Holder"

# end class ns3 (tns: http://simulator-service-types.apollo.pitt.edu/v3_0_2/)

##############################
# targetNamespace
# http://service.apollo.pitt.edu/simulatorservice/v3_0_2/
##############################

class ns0:
    targetNamespace = "http://service.apollo.pitt.edu/simulatorservice/v3_0_2/"

    class runSimulation_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "runSimulation"
        schema = "http://service.apollo.pitt.edu/simulatorservice/v3_0_2/"
        def __init__(self, **kw):
            ns = ns0.runSimulation_Dec.schema
            TClist = [ZSI.TCnumbers.IpositiveInteger(pname="simulationRunId", aname="_simulationRunId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/simulatorservice/v3_0_2/","runSimulation")
            kw["aname"] = "_runSimulation"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._simulationRunId = None
                    return
            Holder.__name__ = "runSimulation_Holder"
            self.pyclass = Holder

    class runSimulationResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "runSimulationResponse"
        schema = "http://service.apollo.pitt.edu/simulatorservice/v3_0_2/"
        def __init__(self, **kw):
            ns = ns0.runSimulationResponse_Dec.schema
            TClist = [GTD("http://services-common.apollo.pitt.edu/v3_0_2/","MethodCallStatus",lazy=True)(pname="methodCallStatus", aname="_methodCallStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/simulatorservice/v3_0_2/","runSimulationResponse")
            kw["aname"] = "_runSimulationResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._methodCallStatus = None
                    return
            Holder.__name__ = "runSimulationResponse_Holder"
            self.pyclass = Holder

    class getScenarioLocationCodesSupportedBySimulator_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getScenarioLocationCodesSupportedBySimulator"
        schema = "http://service.apollo.pitt.edu/simulatorservice/v3_0_2/"
        def __init__(self, **kw):
            ns = ns0.getScenarioLocationCodesSupportedBySimulator_Dec.schema
            TClist = []
            kw["pname"] = ("http://service.apollo.pitt.edu/simulatorservice/v3_0_2/","getScenarioLocationCodesSupportedBySimulator")
            kw["aname"] = "_getScenarioLocationCodesSupportedBySimulator"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "getScenarioLocationCodesSupportedBySimulator_Holder"
            self.pyclass = Holder

    class getScenarioLocationCodesSupportedBySimulatorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getScenarioLocationCodesSupportedBySimulatorResponse"
        schema = "http://service.apollo.pitt.edu/simulatorservice/v3_0_2/"
        def __init__(self, **kw):
            ns = ns0.getScenarioLocationCodesSupportedBySimulatorResponse_Dec.schema
            TClist = [GTD("http://simulator-service-types.apollo.pitt.edu/v3_0_2/","GetScenarioLocationCodesSupportedBySimulatorResult",lazy=True)(pname="getLocationsSupportedBySimulatorResult", aname="_getLocationsSupportedBySimulatorResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/simulatorservice/v3_0_2/","getScenarioLocationCodesSupportedBySimulatorResponse")
            kw["aname"] = "_getScenarioLocationCodesSupportedBySimulatorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getLocationsSupportedBySimulatorResult = None
                    return
            Holder.__name__ = "getScenarioLocationCodesSupportedBySimulatorResponse_Holder"
            self.pyclass = Holder

    class runSimulations_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "runSimulations"
        schema = "http://service.apollo.pitt.edu/simulatorservice/v3_0_2/"
        def __init__(self, **kw):
            ns = ns0.runSimulations_Dec.schema
            TClist = [ZSI.TCnumbers.IpositiveInteger(pname="simulationRunId", aname="_simulationRunId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/simulatorservice/v3_0_2/","runSimulations")
            kw["aname"] = "_runSimulations"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._simulationRunId = None
                    return
            Holder.__name__ = "runSimulations_Holder"
            self.pyclass = Holder

    class runSimulationsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "runSimulationsResponse"
        schema = "http://service.apollo.pitt.edu/simulatorservice/v3_0_2/"
        def __init__(self, **kw):
            ns = ns0.runSimulationsResponse_Dec.schema
            TClist = [GTD("http://services-common.apollo.pitt.edu/v3_0_2/","RunResult",lazy=True)(pname="runSimulationsResult", aname="_runSimulationsResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/simulatorservice/v3_0_2/","runSimulationsResponse")
            kw["aname"] = "_runSimulationsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._runSimulationsResult = None
                    return
            Holder.__name__ = "runSimulationsResponse_Holder"
            self.pyclass = Holder

    class getConfigurationFileForSimulation_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getConfigurationFileForSimulation"
        schema = "http://service.apollo.pitt.edu/simulatorservice/v3_0_2/"
        def __init__(self, **kw):
            ns = ns0.getConfigurationFileForSimulation_Dec.schema
            TClist = [GTD("http://services-common.apollo.pitt.edu/v3_0_2/","RunIdentification",lazy=True)(pname="runId", aname="_runId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/simulatorservice/v3_0_2/","getConfigurationFileForSimulation")
            kw["aname"] = "_getConfigurationFileForSimulation"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._runId = None
                    return
            Holder.__name__ = "getConfigurationFileForSimulation_Holder"
            self.pyclass = Holder

    class getConfigurationFileForSimulationResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getConfigurationFileForSimulationResponse"
        schema = "http://service.apollo.pitt.edu/simulatorservice/v3_0_2/"
        def __init__(self, **kw):
            ns = ns0.getConfigurationFileForSimulationResponse_Dec.schema
            TClist = [GTD("http://simulator-service-types.apollo.pitt.edu/v3_0_2/","GetConfigurationFileForSimulationResult",lazy=True)(pname="configurationFile", aname="_configurationFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/simulatorservice/v3_0_2/","getConfigurationFileForSimulationResponse")
            kw["aname"] = "_getConfigurationFileForSimulationResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._configurationFile = None
                    return
            Holder.__name__ = "getConfigurationFileForSimulationResponse_Holder"
            self.pyclass = Holder

    class getPopulationAndEnvironmentCensus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getPopulationAndEnvironmentCensus"
        schema = "http://service.apollo.pitt.edu/simulatorservice/v3_0_2/"
        def __init__(self, **kw):
            ns = ns0.getPopulationAndEnvironmentCensus_Dec.schema
            TClist = [ZSI.TC.Token(pname="location", aname="_location", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/simulatorservice/v3_0_2/","getPopulationAndEnvironmentCensus")
            kw["aname"] = "_getPopulationAndEnvironmentCensus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._location = None
                    return
            Holder.__name__ = "getPopulationAndEnvironmentCensus_Holder"
            self.pyclass = Holder

    class getPopulationAndEnvironmentCensusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getPopulationAndEnvironmentCensusResponse"
        schema = "http://service.apollo.pitt.edu/simulatorservice/v3_0_2/"
        def __init__(self, **kw):
            ns = ns0.getPopulationAndEnvironmentCensusResponse_Dec.schema
            TClist = [GTD("http://simulator-service-types.apollo.pitt.edu/v3_0_2/","GetPopulationAndEnvironmentCensusResult",lazy=True)(pname="getPopulationAndEnvironmentCensusResult", aname="_getPopulationAndEnvironmentCensusResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/simulatorservice/v3_0_2/","getPopulationAndEnvironmentCensusResponse")
            kw["aname"] = "_getPopulationAndEnvironmentCensusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getPopulationAndEnvironmentCensusResult = None
                    return
            Holder.__name__ = "getPopulationAndEnvironmentCensusResponse_Holder"
            self.pyclass = Holder

    class terminateRun_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "terminateRun"
        schema = "http://service.apollo.pitt.edu/simulatorservice/v3_0_2/"
        def __init__(self, **kw):
            ns = ns0.terminateRun_Dec.schema
            TClist = [GTD("http://services-common.apollo.pitt.edu/v3_0_2/","TerminateRunRequest",lazy=True)(pname="terminateRunRequest", aname="_terminateRunRequest", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/simulatorservice/v3_0_2/","terminateRun")
            kw["aname"] = "_terminateRun"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._terminateRunRequest = None
                    return
            Holder.__name__ = "terminateRun_Holder"
            self.pyclass = Holder

    class terminateRunResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "terminateRunResponse"
        schema = "http://service.apollo.pitt.edu/simulatorservice/v3_0_2/"
        def __init__(self, **kw):
            ns = ns0.terminateRunResponse_Dec.schema
            TClist = [GTD("http://services-common.apollo.pitt.edu/v3_0_2/","TerminteRunResult",lazy=True)(pname="terminateRunResult", aname="_terminateRunResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/simulatorservice/v3_0_2/","terminateRunResponse")
            kw["aname"] = "_terminateRunResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._terminateRunResult = None
                    return
            Holder.__name__ = "terminateRunResponse_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://service.apollo.pitt.edu/simulatorservice/v3_0_2/)
